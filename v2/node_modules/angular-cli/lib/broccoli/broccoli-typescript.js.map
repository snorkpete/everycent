{"version":3,"sources":["broccoli/broccoli-typescript.ts"],"names":["DiffingTSCompiler","DiffingTSCompiler.constructor","DiffingTSCompiler.rebuild","DiffingTSCompiler.collectErrors","DiffingTSCompiler.doFullBuild","DiffingTSCompiler.removeOutputFor","CustomLanguageServiceHost","CustomLanguageServiceHost.constructor","CustomLanguageServiceHost.getScriptFileNames","CustomLanguageServiceHost.getScriptVersion","CustomLanguageServiceHost.getScriptSnapshot","CustomLanguageServiceHost.getCurrentDirectory","CustomLanguageServiceHost.getCompilationSettings","CustomLanguageServiceHost.getDefaultLibFileName"],"mappings":"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","file":"broccoli/broccoli-typescript.js","sourcesContent":["/// <reference path=\"../typings/node/node.d.ts\" />\n\nimport fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport * as ts from 'typescript';\nimport {wrapDiffingPlugin, DiffingBroccoliPlugin, DiffResult} from './diffing-broccoli-plugin';\nimport {convertTsConfig} from './ts-config-converter';\n\n\ntype FileRegistry = ts.Map<{version: number}>;\n\nconst FS_OPTS = {\n  encoding: 'utf-8'\n};\n\n\n/**\n * Broccoli plugin that implements incremental Typescript compiler.\n *\n * It instantiates a typescript compiler instance that keeps all the state about the project and\n * can re-emit only the files that actually changed.\n *\n * Limitations: only files that map directly to the changed source file via naming conventions are\n * re-emitted. This primarily affects code that uses `const enum`s, because changing the enum value\n * requires global emit, which can affect many files.\n */\nclass DiffingTSCompiler implements DiffingBroccoliPlugin {\n  private tsOpts: ts.CompilerOptions;\n  private fileRegistry: FileRegistry = Object.create(null);\n  private rootFilePaths: string[];\n  private tsServiceHost: ts.LanguageServiceHost;\n  private tsService: ts.LanguageService;\n  private firstRun: boolean = true;\n  private previousRunFailed: boolean = false;\n\n  static includeExtensions = ['.ts'];\n  static excludeExtensions = ['.d.ts'];\n\n  constructor(public inputPath: string, public cachePath: string, public options) {\n    if (options.rootFilePaths) {\n      this.rootFilePaths = options.rootFilePaths.splice(0);\n      delete options.rootFilePaths;\n    } else {\n      this.rootFilePaths = [];\n    }\n\n    this.tsOpts = convertTsConfig(options);\n    this.tsOpts.outDir = this.cachePath;\n\n    this.tsServiceHost = new CustomLanguageServiceHost(this.tsOpts, this.rootFilePaths,\n                                                       this.fileRegistry, this.inputPath);\n    this.tsService = ts.createLanguageService(this.tsServiceHost, ts.createDocumentRegistry());\n  }\n\n\n  rebuild(treeDiff: DiffResult) {\n    let pathsToEmit = [];\n    let pathsWithErrors = [];\n    let errorMessages = [];\n\n    treeDiff.addedPaths.concat(treeDiff.changedPaths)\n        .forEach((tsFilePath) => {\n          if (!this.fileRegistry[tsFilePath]) {\n            this.fileRegistry[tsFilePath] = {version: 0};\n            this.rootFilePaths.push(tsFilePath);\n          } else {\n            this.fileRegistry[tsFilePath].version++;\n          }\n\n          pathsToEmit.push(tsFilePath);\n        });\n\n    treeDiff.removedPaths.forEach((tsFilePath) => {\n      console.log('removing outputs for', tsFilePath);\n\n      this.rootFilePaths.splice(this.rootFilePaths.indexOf(tsFilePath), 1);\n      this.fileRegistry[tsFilePath] = null;\n      this.removeOutputFor(tsFilePath);\n    });\n\n    if (this.firstRun) {\n      this.firstRun = false;\n      this.doFullBuild();\n    } else {\n      pathsToEmit.forEach((tsFilePath) => {\n        let output = this.tsService.getEmitOutput(tsFilePath);\n\n        if (output.emitSkipped) {\n          let errorFound = this.collectErrors(tsFilePath);\n          if (errorFound) {\n            pathsWithErrors.push(tsFilePath);\n            errorMessages.push(errorFound);\n          }\n        } else {\n          output.outputFiles.forEach(o => {\n            let destDirPath = path.dirname(o.name);\n            fse.mkdirsSync(destDirPath);\n            fs.writeFileSync(o.name, o.text, FS_OPTS);\n          });\n        }\n      });\n\n      if (pathsWithErrors.length) {\n        this.previousRunFailed = true;\n        var error =\n            new Error('Typescript found the following errors:\\n' + errorMessages.join('\\n'));\n        error['showStack'] = false;\n        throw error;\n      } else if (this.previousRunFailed) {\n        this.doFullBuild();\n      }\n    }\n  }\n\n\n  private collectErrors(tsFilePath): String {\n    let allDiagnostics = this.tsService.getCompilerOptionsDiagnostics()\n                             .concat(this.tsService.getSyntacticDiagnostics(tsFilePath))\n                             .concat(this.tsService.getSemanticDiagnostics(tsFilePath));\n    let errors = [];\n\n    allDiagnostics.forEach(diagnostic => {\n      let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, \"\\n\");\n      if (diagnostic.file) {\n        let{line, character} = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n        errors.push(`  ${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);\n      } else {\n        errors.push(`  Error: ${message}`);\n      }\n    });\n\n    if (errors.length) {\n      return errors.join('\\n');\n    }\n  }\n\n\n  private doFullBuild() {\n    let program = this.tsService.getProgram();\n    let emitResult = program.emit(undefined, function(absoluteFilePath, fileContent) {\n      fse.mkdirsSync(path.dirname(absoluteFilePath));\n      fs.writeFileSync(absoluteFilePath, fileContent, FS_OPTS);\n    });\n\n    if (emitResult.emitSkipped) {\n      let allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);\n      let errorMessages = [];\n\n      allDiagnostics.forEach(diagnostic => {\n        var pos = '';\n        if (diagnostic.file) {\n          var {line, character} = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n          pos = `${diagnostic.file.fileName} (${line + 1}, ${character + 1}): `\n        }\n        var message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n        errorMessages.push(`  ${pos}${message}`);\n      });\n\n      if (errorMessages.length) {\n        this.previousRunFailed = true;\n        var error =\n            new Error('Typescript found the following errors:\\n' + errorMessages.join('\\n'));\n        error['showStack'] = false;\n        throw error;\n      } else {\n        this.previousRunFailed = false;\n      }\n    }\n  }\n\n\n  private removeOutputFor(tsFilePath: string) {\n    let absoluteJsFilePath = path.join(this.cachePath, tsFilePath.replace(/\\.ts$/, '.js'));\n    let absoluteMapFilePath = path.join(this.cachePath, tsFilePath.replace(/.ts$/, '.js.map'));\n    let absoluteDtsFilePath = path.join(this.cachePath, tsFilePath.replace(/\\.ts$/, '.d.ts'));\n\n    if (fs.existsSync(absoluteJsFilePath)) {\n      fs.unlinkSync(absoluteJsFilePath);\n      fs.unlinkSync(absoluteMapFilePath);\n      fs.unlinkSync(absoluteDtsFilePath);\n    }\n  }\n}\n\n\nclass CustomLanguageServiceHost implements ts.LanguageServiceHost {\n  private currentDirectory: string;\n  private defaultLibFilePath: string;\n\n\n  constructor(private compilerOptions: ts.CompilerOptions, private fileNames: string[],\n              private fileRegistry: FileRegistry, private treeInputPath: string) {\n    this.currentDirectory = process.cwd();\n    this.defaultLibFilePath = ts.getDefaultLibFilePath(compilerOptions).replace(/\\\\/g, '/');\n  }\n\n\n  getScriptFileNames(): string[] { return this.fileNames; }\n\n\n  getScriptVersion(fileName: string): string {\n    return this.fileRegistry[fileName] && this.fileRegistry[fileName].version.toString();\n  }\n\n\n  /**\n   * This method is called quite a bit to lookup 3 kinds of paths:\n   * 1/ files in the fileRegistry\n   *   - these are the files in our project that we are watching for changes\n   *   - in the future we could add caching for these files and invalidate the cache when\n   *     the file is changed lazily during lookup\n   * 2/ .d.ts and library files not in the fileRegistry\n   *   - these are not our files, they come from tsd or typescript itself\n   *   - these files change only rarely but since we need them very rarely, it's not worth the\n   *     cache invalidation hassle to cache them\n   * 3/ bogus paths that typescript compiler tries to lookup during import resolution\n   *   - these paths are tricky to cache since files come and go and paths that was bogus in the\n   *     past might not be bogus later\n   *\n   * In the initial experiments the impact of this caching was insignificant (single digit %) and\n   * not worth the potential issues with stale cache records.\n   */\n  getScriptSnapshot(tsFilePath: string): ts.IScriptSnapshot {\n    let absoluteTsFilePath;\n\n    if (tsFilePath == this.defaultLibFilePath || path.isAbsolute(tsFilePath)) {\n      absoluteTsFilePath = tsFilePath;\n    } else if (this.compilerOptions.moduleResolution === ts.ModuleResolutionKind.NodeJs &&\n               tsFilePath.match(/^node_modules/)) {\n      absoluteTsFilePath = path.resolve(tsFilePath);\n    } else {\n      absoluteTsFilePath = path.join(this.treeInputPath, tsFilePath);\n    }\n\n\n    if (!fs.existsSync(absoluteTsFilePath)) {\n      // TypeScript seems to request lots of bogus paths during import path lookup and resolution,\n      // so we we just return undefined when the path is not correct.\n      return undefined;\n    }\n    return ts.ScriptSnapshot.fromString(fs.readFileSync(absoluteTsFilePath, FS_OPTS));\n  }\n\n\n  getCurrentDirectory(): string { return this.currentDirectory; }\n\n  getCompilationSettings(): ts.CompilerOptions { return this.compilerOptions; }\n\n  getDefaultLibFileName(options: ts.CompilerOptions): string {\n    // ignore options argument, options should not change during the lifetime of the plugin\n    return this.defaultLibFilePath;\n  }\n}\n\n\nexport default wrapDiffingPlugin(DiffingTSCompiler);\n"],"sourceRoot":"/source/"}