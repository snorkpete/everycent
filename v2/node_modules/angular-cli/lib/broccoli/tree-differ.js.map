{"version":3,"sources":["broccoli/tree-differ.ts"],"names":["tryStatSync","TreeDiffer","TreeDiffer.constructor","TreeDiffer.constructor.combine","TreeDiffer.diffTree","TreeDiffer.dirtyCheckPath","TreeDiffer.isFileDirty","TreeDiffer.detectDeletionsAndUpdateFingerprints","DiffResult","DiffResult.constructor","DiffResult.log","DiffResult.toString","DirtyCheckingDiffResult","DirtyCheckingDiffResult.constructor","DirtyCheckingDiffResult.toString","DirtyCheckingDiffResult.log","pad","FileStatus"],"mappings":"AAAA,kDAAkD;;;;;;AAElD,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAG9B,qBAAqB,IAAI;IACvBA,IAAIA,CAACA;QACHA,MAAMA,CAACA,EAAEA,CAACA,QAAQA,CAACA,IAAIA,CAACA,CAACA;IAC3BA,CAAEA;IAAAA,KAAKA,CAACA,CAACA,CAACA,CAACA,CAACA,CAACA;QACXA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,KAAKA,QAAQA,CAACA;YAACA,MAAMA,CAACA,IAAIA,CAACA;QACrCA,MAAMA,CAACA,CAACA;IACVA,CAACA;AACHA,CAACA;AAGD;IAOEC,oBAAoBA,KAAaA,EAAUA,QAAgBA,EAAEA,iBAA4BA,EAC7EA,iBAA4BA;QADpBC,UAAKA,GAALA,KAAKA,CAAQA;QAAUA,aAAQA,GAARA,QAAQA,CAAQA;QANnDA,iBAAYA,GAA4BA,MAAMA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA;QAC5DA,qBAAgBA,GAA4BA,MAAMA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA;QAEhEA,YAAOA,GAAWA,IAAIA,CAACA;QACvBA,YAAOA,GAAWA,IAAIA,CAACA;QAI7BA,IAAIA,CAACA,WAAWA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,QAAQA,CAACA,CAACA;QAE3CA,IAAIA,WAAWA,GAAGA,UAACA,GAAGA,IAAKA,OAAAA,IAAIA,MAAMA,CAACA,MAAIA,GAAGA,CAACA,MAAMA,CAACA,OAAOA,EAAEA,EAAEA,CAACA,OAAIA,EAAEA,GAAGA,CAACA,EAAhDA,CAAgDA,CAACA;QAE5EA,IAAIA,CAACA,OAAOA,GAAGA,CAACA,iBAAiBA,IAAIA,EAAEA,CAACA,CAACA,MAAMA,GAAGA,WAAWA,CAACA,iBAAiBA,CAACA,GAAGA,IAAIA,CAACA;QACxFA,IAAIA,CAACA,OAAOA,GAAGA,CAACA,iBAAiBA,IAAIA,EAAEA,CAACA,CAACA,MAAMA,GAAGA,WAAWA,CAACA,iBAAiBA,CAACA,GAAGA,IAAIA,CAACA;QAExFA,iBAAiBA,IAAIA,EAAEA,IAAIA;YACzBC,EAAEA,CAACA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA,CAACA,KAAKA,GAAGA,CAACA,CAACA,CAACA;gBAC3BA,MAAMA,IAAIA,KAAKA,CAACA,0CAAwCA,IAAIA,MAAGA,CAACA,CAACA;YACnEA,CAACA;YACDA,IAAIA,mBAAmBA,GAAGA,qCAAqCA,CAACA;YAChEA,IAAIA,GAAGA,GAAGA,GAAGA,IAAIA,CAACA,OAAOA,CAACA,mBAAmBA,EAAEA,MAAMA,CAACA,GAAGA,GAAGA,CAACA;YAC7DA,MAAMA,CAACA,IAAIA,GAAGA,CAACA,IAAIA,GAAGA,GAAGA,GAAGA,IAAIA,CAACA,GAAGA,IAAIA,CAACA;QAC3CA,CAACA;IACHD,CAACA;IAGMD,6BAAQA,GAAfA;QACEG,IAAIA,MAAMA,GAAGA,IAAIA,uBAAuBA,CAACA,IAAIA,CAACA,KAAKA,EAAEA,IAAIA,CAACA,WAAWA,CAACA,CAACA;QACvEA,IAAIA,CAACA,cAAcA,CAACA,IAAIA,CAACA,QAAQA,EAAEA,MAAMA,CAACA,CAACA;QAC3CA,IAAIA,CAACA,oCAAoCA,CAACA,MAAMA,CAACA,CAACA;QAClDA,MAAMA,CAACA,OAAOA,GAAGA,IAAIA,CAACA,GAAGA,EAAEA,CAACA;QAC5BA,MAAMA,CAACA,MAAMA,CAACA;IAChBA,CAACA;IAGOH,mCAAcA,GAAtBA,UAAuBA,OAAeA,EAAEA,MAA+BA;QAAvEI,iBA8BCA;QA7BCA,EAAEA,CAACA,WAAWA,CAACA,OAAOA,CAACA,CAACA,OAAOA,CAACA,UAACA,OAAOA;YACtCA,IAAIA,YAAYA,GAAGA,IAAIA,CAACA,IAAIA,CAACA,OAAOA,EAAEA,OAAOA,CAACA,CAACA;YAC/CA,IAAIA,QAAQA,GAAGA,EAAEA,CAACA,SAASA,CAACA,YAAYA,CAACA,CAACA;YAC1CA,EAAEA,CAACA,CAACA,QAAQA,CAACA,cAAcA,EAAEA,CAACA,CAACA,CAACA;gBAC9BA,QAAQA,GAAGA,WAAWA,CAACA,YAAYA,CAACA,CAACA;gBACrCA,EAAEA,CAACA,CAACA,QAAQA,KAAKA,IAAIA,CAACA;oBAACA,MAAMA,CAACA;YAChCA,CAACA;YAEDA,EAAEA,CAACA,CAACA,QAAQA,CAACA,WAAWA,EAAEA,CAACA,CAACA,CAACA;gBAC3BA,MAAMA,CAACA,kBAAkBA,EAAEA,CAACA;gBAC5BA,KAAIA,CAACA,cAAcA,CAACA,YAAYA,EAAEA,MAAMA,CAACA,CAACA;YAC5CA,CAACA;YAACA,IAAIA,CAACA,CAACA;gBACNA,EAAEA,CAACA,CAACA,CAACA,CAACA,KAAIA,CAACA,OAAOA,IAAIA,CAACA,YAAYA,CAACA,KAAKA,CAACA,KAAIA,CAACA,OAAOA,CAACA,CAACA;oBACpDA,CAACA,CAACA,KAAIA,CAACA,OAAOA,IAAIA,YAAYA,CAACA,KAAKA,CAACA,KAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;oBACxDA,MAAMA,CAACA,YAAYA,EAAEA,CAACA;oBACtBA,IAAIA,gBAAgBA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,KAAIA,CAACA,QAAQA,EAAEA,YAAYA,CAACA,CAACA;oBAElEA,MAAMA,CAACA,CAACA,KAAIA,CAACA,WAAWA,CAACA,YAAYA,EAAEA,QAAQA,CAACA,CAACA,CAACA,CAACA;wBACjDA,KAAKA,UAAUA,CAACA,KAAKA;4BACnBA,MAAMA,CAACA,UAAUA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA;4BACzCA,KAAKA,CAACA;wBACRA,KAAKA,UAAUA,CAACA,OAAOA;4BACrBA,MAAMA,CAACA,YAAYA,CAACA,IAAIA,CAACA,gBAAgBA,CAACA,CAACA;oBAC/CA,CAACA;gBACHA,CAACA;YACHA,CAACA;QACHA,CAACA,CAACA,CAACA;QAEHA,MAAMA,CAACA,MAAMA,CAACA;IAChBA,CAACA;IAGOJ,gCAAWA,GAAnBA,UAAoBA,IAAYA,EAAEA,IAAcA;QAC9CK,IAAIA,cAAcA,GAAGA,IAAIA,CAACA,YAAYA,CAACA,IAAIA,CAACA,CAACA;QAC7CA,IAAIA,cAAcA,GAAMA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,EAAEA,WAAMA,IAAIA,CAACA,IAAMA,CAACA;QAE9DA,IAAIA,CAACA,gBAAgBA,CAACA,IAAIA,CAACA,GAAGA,cAAcA,CAACA;QAE7CA,EAAEA,CAACA,CAACA,cAAcA,CAACA,CAACA,CAACA;YACnBA,IAAIA,CAACA,YAAYA,CAACA,IAAIA,CAACA,GAAGA,IAAIA,CAACA;YAE/BA,EAAEA,CAACA,CAACA,cAAcA,KAAKA,cAAcA,CAACA,CAACA,CAACA;gBACtCA,kBAAkBA;gBAClBA,MAAMA,CAACA,UAAUA,CAACA,SAASA,CAACA;YAC9BA,CAACA;YAEDA,MAAMA,CAACA,UAAUA,CAACA,OAAOA,CAACA;QAC5BA,CAACA;QAEDA,MAAMA,CAACA,UAAUA,CAACA,KAAKA,CAACA;IAC1BA,CAACA;IAGOL,yDAAoCA,GAA5CA,UAA6CA,MAAkBA;QAC7DM,GAAGA,CAACA,CAACA,GAAGA,CAACA,YAAYA,IAAIA,IAAIA,CAACA,YAAYA,CAACA,CAACA,CAACA;YAC3CA,EAAEA,CAACA,CAACA,CAACA,CAACA,IAAIA,CAACA,OAAOA,IAAIA,CAACA,YAAYA,CAACA,KAAKA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA;gBACpDA,CAACA,CAACA,IAAIA,CAACA,OAAOA,IAAIA,YAAYA,CAACA,KAAKA,CAACA,IAAIA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA,CAACA;gBACxDA,EAAEA,CAACA,CAACA,IAAIA,CAACA,YAAYA,CAACA,YAAYA,CAACA,KAAKA,IAAIA,CAACA,CAACA,CAACA;oBAC7CA,IAAIA,YAAYA,GAAGA,IAAIA,CAACA,QAAQA,CAACA,IAAIA,CAACA,QAAQA,EAAEA,YAAYA,CAACA,CAACA;oBAC9DA,MAAMA,CAACA,YAAYA,CAACA,IAAIA,CAACA,YAAYA,CAACA,CAACA;gBACzCA,CAACA;YACHA,CAACA;QACHA,CAACA;QAEDA,IAAIA,CAACA,YAAYA,GAAGA,IAAIA,CAACA,gBAAgBA,CAACA;QAC1CA,IAAIA,CAACA,gBAAgBA,GAAGA,MAAMA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA;IAC9CA,CAACA;IACHN,iBAACA;AAADA,CAxGA,AAwGCA,IAAA;AAxGY,kBAAU,aAwGtB,CAAA;AAGD;IAKEO,oBAAmBA,KAAkBA;QAAzBC,qBAAyBA,GAAzBA,UAAyBA;QAAlBA,UAAKA,GAALA,KAAKA,CAAaA;QAJ9BA,eAAUA,GAAaA,EAAEA,CAACA;QAC1BA,iBAAYA,GAAaA,EAAEA,CAACA;QAC5BA,iBAAYA,GAAaA,EAAEA,CAACA;IAEKA,CAACA;IAEzCD,wBAAGA,GAAHA,UAAIA,OAAgBA,IAASE,CAACA;IAE9BF,6BAAQA,GAARA;QACEG,wCAAwCA;QACxCA,MAAMA,CAACA,EAAEA,CAACA;IACZA,CAACA;IACHH,iBAACA;AAADA,CAbA,AAaCA,IAAA;AAbY,kBAAU,aAatB,CAAA;AAED;IAAsCI,2CAAUA;IAM9CA,iCAAYA,KAAaA,EAASA,aAAqBA;QAAIC,kBAAMA,KAAKA,CAACA,CAACA;QAAtCA,kBAAaA,GAAbA,aAAaA,CAAQA;QALhDA,iBAAYA,GAAWA,CAACA,CAACA;QACzBA,uBAAkBA,GAAWA,CAACA,CAACA;QAC/BA,cAASA,GAAWA,IAAIA,CAACA,GAAGA,EAAEA,CAACA;QAC/BA,YAAOA,GAAWA,IAAIA,CAACA;IAE2CA,CAACA;IAE1ED,0CAAQA,GAARA;QACEE,MAAMA,CAACA,CAAGA,GAAGA,CAACA,IAAIA,CAACA,KAAKA,EAAEA,EAAEA,CAACA,UAAKA,GAAGA,CAACA,IAAIA,CAACA,OAAOA,GAAGA,IAAIA,CAACA,SAASA,EAAEA,CAACA,CAACA,UAAMA;YACtEA,CAAGA,GAAGA,CAACA,IAAIA,CAACA,UAAUA,CAACA,MAAMA,GAAGA,IAAIA,CAACA,YAAYA,CAACA,MAAMA,GAAGA,IAAIA,CAACA,YAAYA,CAACA,MAAMA,EAAEA,CAACA,CAACA,eAAWA;YAClGA,cAAWA,GAAGA,CAACA,IAAIA,CAACA,YAAYA,EAAEA,CAACA,CAACA,gBAAWA,GAAGA,CAACA,IAAIA,CAACA,kBAAkBA,EAAEA,CAACA,CAACA,OAAGA,CAACA;IAC3FA,CAACA;IAEDF,qCAAGA,GAAHA,UAAIA,OAAOA;QACTG,IAAIA,aAAaA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,GAAGA,CAACA,UAAAA,CAACA,IAAIA,OAAAA,QAAKA,CAACA,CAAEA,EAARA,CAAQA,CAACA;aAC7BA,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA,GAAGA,CAACA,UAAAA,CAACA,IAAIA,OAAAA,QAAKA,CAACA,CAAEA,EAARA,CAAQA,CAACA,CAACA;aAC5CA,MAAMA,CAACA,IAAIA,CAACA,YAAYA,CAACA,GAAGA,CAACA,UAAAA,CAACA,IAAIA,OAAAA,QAAKA,CAACA,CAAEA,EAARA,CAAQA,CAACA,CAACA,CAACA;QACtEA,OAAOA,CAACA,GAAGA,CAACA,iBAAcA,IAAIA,CAAEA,GAAGA,CAACA,CAACA,OAAOA,IAAIA,aAAaA,CAACA,MAAMA,CAACA;YAC7BA,WAASA,aAAaA,CAACA,IAAIA,CAACA,MAAMA,CAACA,QAAKA;YACxCA,EAAEA,CAACA,CAACA,CAACA;IAC/CA,CAACA;IACHH,8BAACA;AAADA,CAtBA,AAsBCA,EAtBqC,UAAU,EAsB/C;AAGD,aAAa,KAAK,EAAE,MAAM;IACxBI,KAAKA,GAAGA,EAAEA,GAAGA,KAAKA,CAACA;IACnBA,IAAIA,gBAAgBA,GAAGA,CAACA,KAAKA,CAACA,MAAMA,GAAGA,MAAMA,CAACA,GAAGA,MAAMA,GAAGA,KAAKA,CAACA,MAAMA,GAAGA,CAACA,CAACA;IAC3EA,gBAAgBA,GAAGA,gBAAgBA,GAAGA,CAACA,CAACA;IACxCA,MAAMA,CAACA,IAAIA,KAAKA,CAACA,gBAAgBA,CAACA,CAACA,IAAIA,CAACA,GAAGA,CAACA,GAAGA,KAAKA,CAACA;AACvDA,CAACA;AAGD,IAAK,UAIJ;AAJD,WAAK,UAAU;IACbC,6CAAKA,CAAAA;IACLA,qDAASA,CAAAA;IACTA,iDAAOA,CAAAA;AACTA,CAACA,EAJI,UAAU,KAAV,UAAU,QAId","file":"broccoli/tree-differ.js","sourcesContent":["/// <reference path=\"../typings/node/node.d.ts\" />\n\nimport fs = require('fs');\nimport path = require('path');\n\n\nfunction tryStatSync(path) {\n  try {\n    return fs.statSync(path);\n  } catch (e) {\n    if (e.code === \"ENOENT\") return null;\n    throw e;\n  }\n}\n\n\nexport class TreeDiffer {\n  private fingerprints: {[key: string]: string} = Object.create(null);\n  private nextFingerprints: {[key: string]: string} = Object.create(null);\n  private rootDirName: string;\n  private include: RegExp = null;\n  private exclude: RegExp = null;\n\n  constructor(private label: string, private rootPath: string, includeExtensions?: string[],\n              excludeExtensions?: string[]) {\n    this.rootDirName = path.basename(rootPath);\n\n    let buildRegexp = (arr) => new RegExp(`(${arr.reduce(combine, \"\")})$`, \"i\");\n\n    this.include = (includeExtensions || []).length ? buildRegexp(includeExtensions) : null;\n    this.exclude = (excludeExtensions || []).length ? buildRegexp(excludeExtensions) : null;\n\n    function combine(prev, curr) {\n      if (curr.charAt(0) !== \".\") {\n        throw new Error(`Extension must begin with '.'. Was: '${curr}'`);\n      }\n      let kSpecialRegexpChars = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g;\n      curr = '(' + curr.replace(kSpecialRegexpChars, '\\\\$&') + ')';\n      return prev ? (prev + '|' + curr) : curr;\n    }\n  }\n\n\n  public diffTree(): DiffResult {\n    let result = new DirtyCheckingDiffResult(this.label, this.rootDirName);\n    this.dirtyCheckPath(this.rootPath, result);\n    this.detectDeletionsAndUpdateFingerprints(result);\n    result.endTime = Date.now();\n    return result;\n  }\n\n\n  private dirtyCheckPath(rootDir: string, result: DirtyCheckingDiffResult) {\n    fs.readdirSync(rootDir).forEach((segment) => {\n      let absolutePath = path.join(rootDir, segment);\n      let pathStat = fs.lstatSync(absolutePath);\n      if (pathStat.isSymbolicLink()) {\n        pathStat = tryStatSync(absolutePath);\n        if (pathStat === null) return;\n      }\n\n      if (pathStat.isDirectory()) {\n        result.directoriesChecked++;\n        this.dirtyCheckPath(absolutePath, result);\n      } else {\n        if (!(this.include && !absolutePath.match(this.include)) &&\n            !(this.exclude && absolutePath.match(this.exclude))) {\n          result.filesChecked++;\n          let relativeFilePath = path.relative(this.rootPath, absolutePath);\n\n          switch (this.isFileDirty(absolutePath, pathStat)) {\n            case FileStatus.Added:\n              result.addedPaths.push(relativeFilePath);\n              break;\n            case FileStatus.Changed:\n              result.changedPaths.push(relativeFilePath);\n          }\n        }\n      }\n    });\n\n    return result;\n  }\n\n\n  private isFileDirty(path: string, stat: fs.Stats): FileStatus {\n    let oldFingerprint = this.fingerprints[path];\n    let newFingerprint = `${stat.mtime.getTime()} # ${stat.size}`;\n\n    this.nextFingerprints[path] = newFingerprint;\n\n    if (oldFingerprint) {\n      this.fingerprints[path] = null;\n\n      if (oldFingerprint === newFingerprint) {\n        // nothing changed\n        return FileStatus.Unchanged;\n      }\n\n      return FileStatus.Changed;\n    }\n\n    return FileStatus.Added;\n  }\n\n\n  private detectDeletionsAndUpdateFingerprints(result: DiffResult) {\n    for (let absolutePath in this.fingerprints) {\n      if (!(this.include && !absolutePath.match(this.include)) &&\n          !(this.exclude && absolutePath.match(this.exclude))) {\n        if (this.fingerprints[absolutePath] !== null) {\n          let relativePath = path.relative(this.rootPath, absolutePath);\n          result.removedPaths.push(relativePath);\n        }\n      }\n    }\n\n    this.fingerprints = this.nextFingerprints;\n    this.nextFingerprints = Object.create(null);\n  }\n}\n\n\nexport class DiffResult {\n  public addedPaths: string[] = [];\n  public changedPaths: string[] = [];\n  public removedPaths: string[] = [];\n\n  constructor(public label: string = '') {}\n\n  log(verbose: boolean): void {}\n\n  toString(): string {\n    // TODO(@caitp): more meaningful logging\n    return '';\n  }\n}\n\nclass DirtyCheckingDiffResult extends DiffResult {\n  public filesChecked: number = 0;\n  public directoriesChecked: number = 0;\n  public startTime: number = Date.now();\n  public endTime: number = null;\n\n  constructor(label: string, public directoryName: string) { super(label); }\n\n  toString() {\n    return `${pad(this.label, 30)}, ${pad(this.endTime - this.startTime, 5)}ms, ` +\n           `${pad(this.addedPaths.length + this.changedPaths.length + this.removedPaths.length, 5)} changes ` +\n           `(files: ${pad(this.filesChecked, 5)}, dirs: ${pad(this.directoriesChecked, 4)})`;\n  }\n\n  log(verbose) {\n    let prefixedPaths = this.addedPaths.map(p => `+ ${p}`)\n                            .concat(this.changedPaths.map(p => `* ${p}`))\n                            .concat(this.removedPaths.map(p => `- ${p}`));\n    console.log(`Tree diff: ${this}` + ((verbose && prefixedPaths.length) ?\n                                            ` [\\n  ${prefixedPaths.join('\\n  ')}\\n]` :\n                                            ''));\n  }\n}\n\n\nfunction pad(value, length) {\n  value = '' + value;\n  let whitespaceLength = (value.length < length) ? length - value.length : 0;\n  whitespaceLength = whitespaceLength + 1;\n  return new Array(whitespaceLength).join(' ') + value;\n}\n\n\nenum FileStatus {\n  Added,\n  Unchanged,\n  Changed\n}\n"],"sourceRoot":"/source/"}