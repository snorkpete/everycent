{"version":3,"sources":["broccoli/diffing-broccoli-plugin.ts"],"names":["wrapDiffingPlugin","DiffingPluginWrapper","DiffingPluginWrapper.constructor","DiffingPluginWrapper.getDiffResult","DiffingPluginWrapper.maybeStoreDiffResult","DiffingPluginWrapper.rebuild","DiffingPluginWrapper.cleanup","DiffingPluginWrapper.relinkOutputAndCachePaths","DiffingPluginWrapper.init","DiffingPluginWrapper.stabilizeTrees","DiffingPluginWrapper.stabilizeTree"],"mappings":"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","file":"broccoli/diffing-broccoli-plugin.js","sourcesContent":["/// <reference path=\"broccoli.d.ts\" />\n/// <reference path=\"../typings/fs-extra/fs-extra.d.ts\" />\n/// <reference path=\"../typings/node/node.d.ts\" />\n\nimport fs = require('fs');\nimport fse = require('fs-extra');\nimport path = require('path');\nimport {TreeDiffer, DiffResult} from './tree-differ';\nimport stabilizeTree from './broccoli-tree-stabilizer';\nlet symlinkOrCopy = require('symlink-or-copy');\n\n\nexport {DiffResult} from './tree-differ';\n\n\n/**\n * Makes writing diffing plugins easy.\n *\n * Factory method that takes a class that implements the DiffingBroccoliPlugin interface and returns\n * an instance of BroccoliTree.\n *\n * @param pluginClass\n * @returns {DiffingPlugin}\n */\nexport function wrapDiffingPlugin(pluginClass): DiffingPluginWrapperFactory {\n  return function() { return new DiffingPluginWrapper(pluginClass, arguments); };\n}\n\n\nexport interface DiffingBroccoliPlugin {\n  rebuild(diff: (DiffResult | DiffResult[])): (Promise<DiffResult | void>| DiffResult | void);\n  cleanup ? () : void;\n}\n\n\ntype DiffingPluginWrapperFactory = (inputTrees: (BroccoliTree | BroccoliTree[]), options?) =>\n    BroccoliTree;\n\n\nclass DiffingPluginWrapper implements BroccoliTree {\n  treeDiffer: TreeDiffer = null;\n  treeDiffers: TreeDiffer[] = null;\n  initialized = false;\n  wrappedPlugin: DiffingBroccoliPlugin = null;\n  inputTree = null;\n  inputTrees = null;\n  description = null;\n\n  // props monkey-patched by broccoli builder:\n  inputPath = null;\n  inputPaths = null;\n  cachePath = null;\n  outputPath = null;\n\n  private diffResult: DiffResult = null;\n\n  constructor(private pluginClass, private wrappedPluginArguments) {\n    if (Array.isArray(wrappedPluginArguments[0])) {\n      this.inputTrees = this.stabilizeTrees(wrappedPluginArguments[0]);\n    } else {\n      this.inputTree = this.stabilizeTree(wrappedPluginArguments[0]);\n    }\n\n    this.description = this.pluginClass.name;\n  }\n\n  private getDiffResult(): (DiffResult | DiffResult[]) {\n    let returnOrCalculateDiffResult = (tree, index) => {\n      // returnOrCalculateDiffResult will do one of two things:\n      //\n      // If `this.diffResult` is null, calculate a DiffResult using TreeDiffer\n      // for the input tree.\n      //\n      // Otherwise, `this.diffResult` was produced from the output of the\n      // inputTree's rebuild() method, and can be used without being checked.\n      // Set `this.diffResult` to null and return the previously stored value.\n      let diffResult = tree.diffResult;\n      if (diffResult) return diffResult;\n      let differ = index === false ? this.treeDiffer : this.treeDiffers[index];\n      return differ.diffTree();\n    };\n\n    if (this.inputTrees) {\n      return this.inputTrees.map(returnOrCalculateDiffResult);\n    } else if (this.inputTree) {\n      return returnOrCalculateDiffResult(this.inputTree, false);\n    } else {\n      throw new Error(\"Missing TreeDiffer\");\n    }\n  }\n\n  private maybeStoreDiffResult(value: (DiffResult | void)) {\n    if (!(value instanceof DiffResult)) value = null;\n    this.diffResult = <DiffResult>(value);\n  }\n\n  rebuild(): (Promise<any>| void) {\n    try {\n      let firstRun = !this.initialized;\n      this.init();\n\n      let diffResult = this.getDiffResult();\n\n      let result = this.wrappedPlugin.rebuild(diffResult);\n\n      if (result) {\n        let resultPromise = <Promise<DiffResult | void>>(result);\n        if (resultPromise.then) {\n          // rebuild() -> Promise<>\n          return resultPromise.then((result: (DiffResult | void)) => {\n            this.maybeStoreDiffResult(result);\n            this.relinkOutputAndCachePaths();\n          });\n        }\n      }\n\n      this.maybeStoreDiffResult(<(DiffResult | void)>(result));\n      this.relinkOutputAndCachePaths();\n    } catch (e) {\n      e.message = `[${this.description}]: ${e.message}`;\n      throw e;\n    }\n  }\n\n\n  cleanup() {\n    if (this.wrappedPlugin && this.wrappedPlugin.cleanup) {\n      this.wrappedPlugin.cleanup();\n    }\n  }\n\n\n  private relinkOutputAndCachePaths() {\n    // just symlink the cache and output tree\n    fs.rmdirSync(this.outputPath);\n    symlinkOrCopy.sync(this.cachePath, this.outputPath);\n  }\n\n\n  private init() {\n    if (!this.initialized) {\n      let includeExtensions = this.pluginClass.includeExtensions || [];\n      let excludeExtensions = this.pluginClass.excludeExtensions || [];\n      let description = this.description;\n      this.initialized = true;\n      if (this.inputPaths) {\n        this.treeDiffers =\n            this.inputPaths.map((inputPath) => new TreeDiffer(\n                                    description, inputPath, includeExtensions, excludeExtensions));\n      } else if (this.inputPath) {\n        this.treeDiffer =\n            new TreeDiffer(description, this.inputPath, includeExtensions, excludeExtensions);\n      }\n      this.wrappedPlugin = new this.pluginClass(this.inputPaths || this.inputPath, this.cachePath,\n                                                this.wrappedPluginArguments[1]);\n    }\n  }\n\n\n  private stabilizeTrees(trees: BroccoliTree[]) {\n    // Prevent extensions to prevent array from being mutated from the outside.\n    // For-loop used to avoid re-allocating a new array.\n    for (let i = 0; i < trees.length; ++i) {\n      trees[i] = this.stabilizeTree(trees[i]);\n    }\n    return Object.freeze(trees);\n  }\n\n\n  private stabilizeTree(tree: BroccoliTree) {\n    // Ignore all DiffingPlugins as they are already stable, for others we don't know for sure\n    // so we need to stabilize them.\n    // Since it's not safe to use instanceof operator in node, we are checking the constructor.name.\n    //\n    // New-styler/rebuild trees should always be stable.\n    let isNewStyleTree = !!(tree['newStyleTree'] || typeof tree.rebuild === 'function' ||\n                            tree['isReadAPICompatTree'] || tree.constructor['name'] === 'Funnel');\n\n    return isNewStyleTree ? tree : stabilizeTree(tree);\n  }\n}\n"],"sourceRoot":"/source/"}