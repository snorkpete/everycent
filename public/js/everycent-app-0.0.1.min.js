!function(){angular.module("everycent.common",[])}(),function(){angular.module("everycent.menu",["everycent.common"])}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("sign_in",{url:"/sign_in",templateUrl:"app/security/sign-in.html",controller:"SignInCtrl as vm"})}angular.module("everycent.security",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("allocation-categories",{url:"/allocation-categories",templateUrl:"app/setup/allocation-categories/list.html",controller:"AllocationCategoriesCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}})}angular.module("everycent.setup.allocation-categories",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("bank-accounts",{url:"/bank-accounts",templateUrl:"app/setup/bank-accounts/list.html",controller:"BankAccountsCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("bank-accounts.new",{url:"/bank-accounts/new",templateUrl:"app/setup/bank-accounts/new.html"}).state("bank-accounts.edit",{url:"/bank-accounts/edit",templateUrl:"app/setup/bank-accounts/edit.html"})}angular.module("everycent.setup.bank-accounts",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("institutions",{url:"/institutions",templateUrl:"app/setup/institutions/list.html",controller:"InstitutionsCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("institutions.new",{url:"/institutions/new",templateUrl:"app/setup/institutions/new.html"}).state("institutions.edit",{url:"/institutions/edit",templateUrl:"app/setup/institutions/edit.html"})}angular.module("everycent.setup.institutions",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("recurring-allocations",{url:"/recurring-allocations",templateUrl:"app/setup/recurring-allocations/list.html",controller:"RecurringAllocationsCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("recurring-allocations.new",{url:"/recurring-allocations/new",templateUrl:"app/setup/recurring-allocations/new.html"}).state("recurring-allocations.edit",{url:"/recurring-allocations/edit",templateUrl:"app/setup/recurring-allocations/edit.html"})}angular.module("everycent.setup.recurring-allocations",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("recurring-incomes",{url:"/recurring-incomes",templateUrl:"app/setup/recurring-incomes/list.html",controller:"RecurringIncomesCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("recurring-incomes.new",{url:"/recurring-incomes/new",templateUrl:"app/setup/recurring-incomes/new.html"}).state("recurring-incomes.edit",{url:"/recurring-incomes/edit",templateUrl:"app/setup/recurring-incomes/edit.html"})}angular.module("everycent.setup.recurring-incomes",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){"use strict";function AppConfig($authProvider){$authProvider.configure({apiUrl:""})}function MainCtrl(MessageService){var main=this;main.ui=MessageService.data,main.currentPage="institutions",main.user={name:"Kion Stephen"}}angular.module("everycent",["ui.bootstrap","ui.router","ngCookies","ngAnimate","ng-token-auth","restangular","angular-loading-bar","everycent.common","everycent.menu","everycent.security","everycent.setup.institutions","everycent.setup.bank-accounts","everycent.setup.recurring-incomes","everycent.setup.recurring-allocations","everycent.setup.allocation-categories"]),angular.module("everycent").config(AppConfig).controller("MainCtrl",MainCtrl),AppConfig.$inject=["$authProvider","$compileProvider"],MainCtrl.$inject=["MessageService"]}(),function(){"use strict";function RouteConfiguration($stateProvider,$urlRouterProvider){$stateProvider.state("home",{url:"/",templateUrl:"app/home/home.html",controller:[function(){}]}).state("all",{"abstract":!0,resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("all.institutions",{url:"/institutions",templateUrl:"app/institutions/list.html",controller:"InstitutionsCtrl as vm"}),$urlRouterProvider.otherwise("/")}angular.module("everycent").config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function ecFormField(){var directive={restrict:"E",templateUrl:"app/common/ec-form-field-directive.html",scope:{label:"@",type:"@",labelWidth:"@",fieldWidth:"@",placeholder:"@",listOf:"@",isRequired:"=ngRequired",model:"=ngModel",error:"=",name:"=fieldName"},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(LookupService){var vm=this;vm.labelWidth=2,vm.fieldWidth=10,"select"===vm.type&&LookupService.refreshList(vm.listOf).then(function(items){vm.items=items})}angular.module("everycent.common").directive("ecFormField",ecFormField),controller.$inject=["LookupService"]}(),function(){"use strict";function ecIcon(){function controller(){}var directive={restrict:"E",templateUrl:"app/common/ec-icon-directive.html",scope:{type:"@"},controller:controller,controllerAs:"vm",bindToController:!0};return directive}angular.module("everycent.common").directive("ecIcon",ecIcon)}(),function(){function ecMessage(){var directive={restrict:"E",templateUrl:"app/common/ec-message-directive.html",scope:{},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(MessageService){var vm=this;vm.ui=MessageService.getMessageData(),vm.remove=MessageService.clearMessage}angular.module("everycent.common").directive("ecMessage",ecMessage),controller.$inject=["MessageService"]}(),function(){"use strict";function ecPanel(){function controller(){var vm=this;vm.type="default"}var directive={restrict:"E",templateUrl:"app/common/ec-panel-directive.html",transclude:!0,scope:{type:"@",title:"@"},controller:controller,controllerAs:"vm",bindToController:!0};return directive}angular.module("everycent.common").directive("ecPanel",ecPanel)}(),function(){"use strict";function FormService(){function setErrors(form,errorData){Object.keys(errorData).forEach(function(field){form[field].$error.server=errorData[field][0]})}function resetForm(model,form,fields){fields.forEach(function(field){model[field]="",form[field]&&(form[field].$error={})})}var service={setErrors:setErrors,resetForm:resetForm};return service}angular.module("everycent.common").factory("FormService",FormService),FormService.$inject=[]}(),function(){"use strict";function LookupService(Restangular){function refreshList(list){return Restangular.all(list).getList()}var service={refreshList:refreshList};return service}angular.module("everycent.common").factory("LookupService",LookupService),LookupService.$inject=["Restangular"]}(),function(){function MessageService(){function getMessageData(){return data}function setMessage(message){clearMessage(),data.message=message}function setErrorMessage(message){clearMessage(),data.errorMessage=message}function setWarningMessage(message){clearMessage(),data.warningMessage=message}function clearMessage(){data.message="",data.errorMessage="",data.warningMessage=""}var data={},service={getMessageData:getMessageData,setMessage:setMessage,setErrorMessage:setErrorMessage,setWarningMessage:setWarningMessage,clearMessage:clearMessage};return service}angular.module("everycent.common").factory("MessageService",MessageService),MessageService.$inject=[]}(),function(){"use strict";function ModalService($modal,$document){function show(options){function modalController(){var vm=this;vm.options=options,modalFix(),vm.options.confirm=function(){modalInstance.close("ok")},vm.options.cancel=function(){modalInstance.dismiss("cancel")}}var modalInstance=$modal.open({templateUrl:"app/common/modal.html",backdrop:"static",controller:modalController,controllerAs:"vm"});return modalInstance.result}function modalFix(){setTimeout(function(){angular.element($document[0].querySelectorAll("div.modal-backdrop")).css("height","1000px")},100)}var service={show:show};return service}angular.module("everycent.common").factory("ModalService",ModalService),ModalService.$inject=["$modal","$document"]}(),function(){"use strict";function StateService($state){function goToState(state,params){params?$state.go(state,params):$state.go(state)}function is(state){return $state.is(state)}var service={goToState:goToState,is:is};return service}angular.module("everycent.common").factory("StateService",StateService),StateService.$inject=["$state"]}(),function(){function ecNavbar(){var directive={restrict:"E",templateUrl:"app/menu/ec-navbar-directive.html",scope:{userName:"=",currentPage:"="},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(MessageService,$state){function goToPage(page){$state.go(page),vm.currentPage=page,MessageService.clearMessage()}function logout(){MessageService.setErrorMessage("Logout not yet implemented.")}var vm=this;vm.goToPage=goToPage,vm.logout=logout}angular.module("everycent.menu").directive("ecNavbar",ecNavbar),controller.$inject=["MessageService","$state"]}(),function(){"use strict";function SignInCtrl($auth,$state,MessageService){function signIn(params){$auth.submitLogin(params).then(function(){MessageService.setMessage("Logged in successfully."),$state.go("institutions")})["catch"](function(response){return MessageService.setErrorMessage("Invalid login"),response.data&&response.data.errors&&MessageService.setErrorMessage(response.data.errors[0]),!0})}var vm=this;vm.signIn=signIn}angular.module("everycent.security").controller("SignInCtrl",SignInCtrl),SignInCtrl.$inject=["$auth","$state","MessageService"]}(),function(){"use strict";function AllocationCategoriesCtrl(MessageService,AllocationCategoriesService,ModalService,FormService,StateService){function activate(){refreshAllocationCategoryList()}function refreshAllocationCategoryList(){return AllocationCategoriesService.getAllocationCategories().then(function(categories){vm.allocationCategories=categories})}function switchToEditMode(){vm.isEditMode=!0}function cancelEdit(){refreshAllocationCategoryList(),vm.isEditMode=!1}function newAllocationCategory(){var newCategory=AllocationCategoriesService.newCategory();vm.allocationCategories.push(newCategory)}function saveChanges(){vm.allocationCategories.forEach(function(category){category.deleted?category.remove():category.save()}),refreshAllocationCategoryList()["finally"](function(){MessageService.setMessage("Changes saved."),vm.isEditMode=!1})}function markForDeletion(category,isDeleted){category.deleted=isDeleted}function percentageTotal(){return _.reduce(vm.allocationCategories,function(sum,category){return category.deleted?sum:sum+category.percentage},0)}var vm=this;vm.state=StateService,vm.isEditMode=!1,vm.allocationCategories=[],vm.switchToEditMode=switchToEditMode,vm.cancelEdit=cancelEdit,vm.newAllocationCategory=newAllocationCategory,vm.saveChanges=saveChanges,vm.markForDeletion=markForDeletion,vm.percentageTotal=percentageTotal,activate()}angular.module("everycent.setup.allocation-categories").controller("AllocationCategoriesCtrl",AllocationCategoriesCtrl),AllocationCategoriesCtrl.$inject=["MessageService","AllocationCategoriesService","ModalService","FormService","StateService"]}(),function(){"use strict";function AllocationCategoriesService($http,Restangular){function getAllocationCategories(){return baseAll.getList()}function newCategory(){var newCategory={name:"",percentage:0};return Restangular.restangularizeElement("",newCategory,"allocation_categories")}var service={getAllocationCategories:getAllocationCategories,newCategory:newCategory},baseAll=Restangular.all("allocation_categories");return service}angular.module("everycent.setup.allocation-categories").factory("AllocationCategoriesService",AllocationCategoriesService),AllocationCategoriesService.$inject=["$http","Restangular"]}(),function(){"use strict";function BankAccountsCtrl(MessageService,BankAccountsService,ModalService,FormService,StateService){function activate(){refreshBankAccountList()}function refreshBankAccountList(){BankAccountsService.getBankAccounts().then(function(bankAccounts){vm.bankAccounts=bankAccounts})}function addBankAccount(bankAccount,form){BankAccountsService.addBankAccount(bankAccount).then(function(){refreshBankAccountList(),MessageService.setMessage('Bank Account "'+bankAccount.name+'" added successfully.'),FormService.resetForm(bankAccount,form,["name","account_type","account_no","opening_balance"])},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Bank Account not saved."),!1})}function selectBankAccountForUpdate(bankAccount){vm.bankAccount=bankAccount,StateService.goToState("bank-accounts.edit")}function updateBankAccount(bankAccount,form){bankAccount.save().then(function(){refreshBankAccountList(),MessageService.setMessage('Bank Account "'+bankAccount.name+'" updated successfully.'),FormService.resetForm(bankAccount,form,["name","account_type","institution_id","account_no","opening_balance"]),vm.bankAccount={},StateService.goToState("bank-accounts")},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Bank Account not updated."),!1})}function cancelEdit(){vm.bankAccount={},refreshBankAccountList(),StateService.goToState("bank-accounts")}function deleteBankAccount(bankAccount){var modalOptions={headerText:"Delete this Bank Account?",bodyText:"Are you sure you want to delete the Bank Account: "+bankAccount.name+"?",confirmButtonText:"Delete",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){bankAccount.remove().then(function(){refreshBankAccountList(),MessageService.setMessage("Bank Account deleted.")})["catch"](function(){MessageService.setErrorMessage("Error deleting.")})},function(){MessageService.setErrorMessage("Delete cancelled.")})}var vm=this;vm.state=StateService,vm.bankAccount={},vm.bankAccounts=[],vm.addBankAccount=addBankAccount,vm.selectBankAccountForUpdate=selectBankAccountForUpdate,vm.updateBankAccount=updateBankAccount,vm.cancelEdit=cancelEdit,vm.deleteBankAccount=deleteBankAccount,activate()}angular.module("everycent.setup.bank-accounts").controller("BankAccountsCtrl",BankAccountsCtrl),BankAccountsCtrl.$inject=["MessageService","BankAccountsService","ModalService","FormService","StateService"]}(),function(){"use strict";function BankAccountsService($http,Restangular){function getBankAccounts(){return baseAll.getList()}function addBankAccount(bankAccount){return baseAll.post(bankAccount)}var service={getBankAccounts:getBankAccounts,addBankAccount:addBankAccount},baseAll=Restangular.all("bank_accounts");return service}angular.module("everycent.setup.bank-accounts").factory("BankAccountsService",BankAccountsService),BankAccountsService.$inject=["$http","Restangular"]}(),function(){"use strict";function InstitutionsCtrl(MessageService,InstitutionsService,ModalService,FormService,StateService){function activate(){refreshInstitutionList()}function refreshInstitutionList(){InstitutionsService.getInstitutions().then(function(institutions){vm.institutions=institutions})}function addInstitution(institution,form){InstitutionsService.addInstitution(institution).then(function(){refreshInstitutionList(),MessageService.setMessage('Institution "'+institution.name+'" added successfully.'),FormService.resetForm(institution,form,["name"])},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Institution not saved."),!1})}function selectInstitutionForUpdate(institution){vm.institution=institution,StateService.goToState("institutions.edit")}function updateInstitution(institution,form){institution.save().then(function(){refreshInstitutionList(),MessageService.setMessage('Institution "'+institution.name+'" updated successfully.'),FormService.resetForm(institution,form,["name"]),vm.institution={},StateService.goToState("institutions")},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Institution not updated."),!1})}function cancelEdit(){vm.institution={},refreshInstitutionList(),StateService.goToState("institutions")}function deleteInstitution(institution){var modalOptions={headerText:"Delete this institution?",bodyText:"Are you sure you want to delete the institution: "+institution.name+"?",confirmButtonText:"Delete",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){institution.remove().then(function(){refreshInstitutionList(),MessageService.setMessage("Institution deleted.")})["catch"](function(){MessageService.setErrorMessage("Error deleting.")})},function(){MessageService.setErrorMessage("Delete cancelled.")})}var vm=this;vm.state=StateService,vm.institution={},vm.institutions=[],vm.addInstitution=addInstitution,vm.selectInstitutionForUpdate=selectInstitutionForUpdate,vm.updateInstitution=updateInstitution,vm.cancelEdit=cancelEdit,vm.deleteInstitution=deleteInstitution,activate()}angular.module("everycent.setup.institutions").controller("InstitutionsCtrl",InstitutionsCtrl),InstitutionsCtrl.$inject=["MessageService","InstitutionsService","ModalService","FormService","StateService"]}(),function(){"use strict";function InstitutionsService($http,Restangular){function getInstitutions(){return baseAll.getList()}function addInstitution(institution){return baseAll.post(institution)}var service={getInstitutions:getInstitutions,addInstitution:addInstitution},baseAll=Restangular.all("institutions");return service}angular.module("everycent.setup.institutions").factory("InstitutionsService",InstitutionsService),InstitutionsService.$inject=["$http","Restangular"]}(),function(){"use strict";function RecurringAllocationsCtrl(MessageService,RecurringAllocationsService,ModalService,FormService,StateService){function activate(){refreshRecurringAllocationList()}function refreshRecurringAllocationList(){RecurringAllocationsService.getRecurringAllocations().then(function(recurringAllocations){vm.recurringAllocations=recurringAllocations})}function addRecurringAllocation(recurringAllocation,form){RecurringAllocationsService.addRecurringAllocation(recurringAllocation).then(function(){refreshRecurringAllocationList(),MessageService.setMessage('Recurring Allocation "'+recurringAllocation.name+'" added successfully.'),FormService.resetForm(recurringAllocation,form,["name","amount","bank_account_id"])},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Recurring Allocation not saved."),!1})}function selectRecurringAllocationForUpdate(recurringAllocation){vm.recurringAllocation=recurringAllocation,StateService.goToState("recurring-allocations.edit")}function updateRecurringAllocation(recurringAllocation,form){recurringAllocation.save().then(function(){refreshRecurringAllocationList(),MessageService.setMessage('Recurring Allocation "'+recurringAllocation.name+'" updated successfully.'),FormService.resetForm(recurringAllocation,form,["name","account_type","institution_id","account_no","opening_balance"]),vm.recurringAllocation={},StateService.goToState("recurring-allocations")},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Recurring Allocation not updated."),!1})}function cancelEdit(){vm.recurringAllocation={},refreshRecurringAllocationList(),StateService.goToState("recurring-allocations")}function deleteRecurringAllocation(recurringAllocation){var modalOptions={headerText:"Delete this Recurring Allocation?",bodyText:"Are you sure you want to delete the Recurring Allocation: "+recurringAllocation.name+"?",confirmButtonText:"Delete",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){recurringAllocation.remove().then(function(){refreshRecurringAllocationList(),MessageService.setMessage("Recurring Allocation deleted.")})["catch"](function(){MessageService.setErrorMessage("Error deleting.")})},function(){MessageService.setErrorMessage("Delete cancelled.")})}var vm=this;vm.state=StateService,vm.recurringAllocation={},vm.recurringAllocations=[],vm.addRecurringAllocation=addRecurringAllocation,vm.selectRecurringAllocationForUpdate=selectRecurringAllocationForUpdate,vm.updateRecurringAllocation=updateRecurringAllocation,vm.cancelEdit=cancelEdit,vm.deleteRecurringAllocation=deleteRecurringAllocation,activate()}angular.module("everycent.setup.recurring-allocations").controller("RecurringAllocationsCtrl",RecurringAllocationsCtrl),RecurringAllocationsCtrl.$inject=["MessageService","RecurringAllocationsService","ModalService","FormService","StateService"]}(),function(){"use strict";function RecurringAllocationsService($http,Restangular){function getRecurringAllocations(){return baseAll.getList()}function addRecurringAllocation(recurringAllocation){return baseAll.post(recurringAllocation)}var service={getRecurringAllocations:getRecurringAllocations,addRecurringAllocation:addRecurringAllocation},baseAll=Restangular.all("recurring_allocations");return service}angular.module("everycent.setup.recurring-allocations").factory("RecurringAllocationsService",RecurringAllocationsService),RecurringAllocationsService.$inject=["$http","Restangular"]}(),function(){"use strict";function RecurringIncomesCtrl(MessageService,RecurringIncomesService,ModalService,FormService,StateService){function activate(){refreshRecurringIncomeList()}function refreshRecurringIncomeList(){RecurringIncomesService.getRecurringIncomes().then(function(recurringIncomes){vm.recurringIncomes=recurringIncomes})}function addRecurringIncome(recurringIncome,form){RecurringIncomesService.addRecurringIncome(recurringIncome).then(function(){refreshRecurringIncomeList(),MessageService.setMessage('Recurring Income "'+recurringIncome.name+'" added successfully.'),FormService.resetForm(recurringIncome,form,["name","amount","bank_account_id"])},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Recurring Income not saved."),!1})}function selectRecurringIncomeForUpdate(recurringIncome){vm.recurringIncome=recurringIncome,StateService.goToState("recurring-incomes.edit")}function updateRecurringIncome(recurringIncome,form){recurringIncome.save().then(function(){refreshRecurringIncomeList(),MessageService.setMessage('Recurring Income "'+recurringIncome.name+'" updated successfully.'),FormService.resetForm(recurringIncome,form,["name","account_type","institution_id","account_no","opening_balance"]),vm.recurringIncome={},StateService.goToState("recurring-incomes")},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Recurring Income not updated."),!1})}function cancelEdit(){vm.recurringIncome={},refreshRecurringIncomeList(),StateService.goToState("recurring-incomes")}function deleteRecurringIncome(recurringIncome){var modalOptions={headerText:"Delete this Recurring Income?",bodyText:"Are you sure you want to delete the Recurring Income: "+recurringIncome.name+"?",confirmButtonText:"Delete",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){recurringIncome.remove().then(function(){refreshRecurringIncomeList(),MessageService.setMessage("Recurring Income deleted.")})["catch"](function(){MessageService.setErrorMessage("Error deleting.")})},function(){MessageService.setErrorMessage("Delete cancelled.")})}var vm=this;vm.state=StateService,vm.recurringIncome={},vm.recurringIncomes=[],vm.addRecurringIncome=addRecurringIncome,vm.selectRecurringIncomeForUpdate=selectRecurringIncomeForUpdate,vm.updateRecurringIncome=updateRecurringIncome,vm.cancelEdit=cancelEdit,vm.deleteRecurringIncome=deleteRecurringIncome,activate()}angular.module("everycent.setup.recurring-incomes").controller("RecurringIncomesCtrl",RecurringIncomesCtrl),RecurringIncomesCtrl.$inject=["MessageService","RecurringIncomesService","ModalService","FormService","StateService"]}(),function(){"use strict";function RecurringIncomesService($http,Restangular){function getRecurringIncomes(){return baseAll.getList()}function addRecurringIncome(recurringIncome){return baseAll.post(recurringIncome)}var service={getRecurringIncomes:getRecurringIncomes,addRecurringIncome:addRecurringIncome},baseAll=Restangular.all("recurring_incomes");return service}angular.module("everycent.setup.recurring-incomes").factory("RecurringIncomesService",RecurringIncomesService),RecurringIncomesService.$inject=["$http","Restangular"]}();
//# sourceMappingURL=everycent-app-0.0.1.min.map