!function(){function RouteConfiguration($stateProvider){$stateProvider.state("account-statuses",{url:"/account-statuses",templateUrl:"app/account-statuses/account-statuses-list.html",controller:"AccountStatusesCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}})}angular.module("everycent.account-statuses",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("budgets",{url:"/budgets",templateUrl:"app/budgets/budget-list.html",controller:"BudgetsCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("budgets.new",{url:"/budgets.new",templateUrl:"app/budgets/budget-new.html"}).state("budgets-edit",{url:"/budgets/:budget_id/edit",templateUrl:"app/budgets/budget-edit.html",controller:"BudgetEditorCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}})}angular.module("everycent.budgets",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){angular.module("everycent.common",[])}(),function(){angular.module("everycent.menu",["everycent.common"])}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("sign_in",{url:"/sign_in",templateUrl:"app/security/sign-in.html",controller:"SignInCtrl as vm"})}angular.module("everycent.security",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("allocation-categories",{url:"/allocation-categories",templateUrl:"app/setup/allocation-categories/list.html",controller:"AllocationCategoriesCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}})}angular.module("everycent.setup.allocation-categories",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("bank-accounts",{url:"/bank-accounts",templateUrl:"app/setup/bank-accounts/list.html",controller:"BankAccountsCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("bank-accounts.new",{url:"/bank-accounts/new",templateUrl:"app/setup/bank-accounts/new.html"}).state("bank-accounts.edit",{url:"/bank-accounts/edit",templateUrl:"app/setup/bank-accounts/edit.html"})}angular.module("everycent.setup.bank-accounts",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("institutions",{url:"/institutions",templateUrl:"app/setup/institutions/list.html",controller:"InstitutionsCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("institutions.new",{url:"/institutions/new",templateUrl:"app/setup/institutions/new.html"}).state("institutions.edit",{url:"/institutions/edit",templateUrl:"app/setup/institutions/edit.html"})}angular.module("everycent.setup.institutions",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("recurring-allocations",{url:"/recurring-allocations",templateUrl:"app/setup/recurring-allocations/list.html",controller:"RecurringAllocationsCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("recurring-allocations.new",{url:"/recurring-allocations/new",templateUrl:"app/setup/recurring-allocations/new.html"}).state("recurring-allocations.edit",{url:"/recurring-allocations/edit",templateUrl:"app/setup/recurring-allocations/edit.html"})}angular.module("everycent.setup.recurring-allocations",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("recurring-incomes",{url:"/recurring-incomes",templateUrl:"app/setup/recurring-incomes/list.html",controller:"RecurringIncomesCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}).state("recurring-incomes.new",{url:"/recurring-incomes/new",templateUrl:"app/setup/recurring-incomes/new.html"}).state("recurring-incomes.edit",{url:"/recurring-incomes/edit",templateUrl:"app/setup/recurring-incomes/edit.html"})}angular.module("everycent.setup.recurring-incomes",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){function RouteConfiguration($stateProvider){$stateProvider.state("transactions",{url:"/transactions",templateUrl:"app/transactions/transaction-list.html",controller:"TransactionsCtrl as vm",resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}})}angular.module("everycent.transactions",["everycent.common"]).config(RouteConfiguration),RouteConfiguration.$inject=["$stateProvider"]}(),function(){"use strict";function AppConfig($authProvider,$compileProvider,$httpProvider){$httpProvider.useApplyAsync(!0)}function AuthenticationSetup($rootScope,$timeout,$location,MessageService,UserService){$rootScope.$on("auth:validation-success",function(ev,userConfig){UserService.setupUser(userConfig)}),$rootScope.$on("auth:invalid",function(){$timeout(function(){$location.path("/sign_in"),MessageService.setErrorMessage("You have been signed out. Please sign in again.")},500)})}function MainCtrl(MessageService){var main=this;main.ui=MessageService.data}angular.module("everycent",["ui.bootstrap","ui.router","ngCookies","ngAnimate","ng-token-auth","restangular","toastr","angular-loading-bar","everycent.common","everycent.menu","everycent.security","everycent.setup.institutions","everycent.setup.bank-accounts","everycent.setup.recurring-incomes","everycent.setup.recurring-allocations","everycent.setup.allocation-categories","everycent.budgets","everycent.transactions","everycent.account-statuses"]),angular.module("everycent").config(AppConfig).run(AuthenticationSetup).controller("MainCtrl",MainCtrl),AppConfig.$inject=["$authProvider","$compileProvider","$httpProvider"],AuthenticationSetup.$inject=["$rootScope","$timeout","$location","MessageService","UserService"],MainCtrl.$inject=["MessageService"]}(),function(){"use strict";function AccountStatusesCtrl(AccountStatusesService,StateService){function activate(){refreshBankAccountList()}function refreshBankAccountList(){AccountStatusesService.getAccountStatuses().then(function(bankAccounts){vm.bankAccounts=bankAccounts})}var vm=this;vm.state=StateService,vm.bankAccount={},vm.bankAccounts=[],vm.refresh=refreshBankAccountList,activate()}angular.module("everycent.account-statuses").controller("AccountStatusesCtrl",AccountStatusesCtrl),AccountStatusesCtrl.$inject=["AccountStatusesService","StateService"]}(),function(){"use strict";function AccountStatusesService($http,Restangular){function getAccountStatuses(){return baseAll.getList()}var service={getAccountStatuses:getAccountStatuses},baseAll=Restangular.all("account_statuses");return service}angular.module("everycent.account-statuses").factory("AccountStatusesService",AccountStatusesService),AccountStatusesService.$inject=["$http","Restangular"]}(),function(){"use strict";function RouteConfiguration($authProvider,$stateProvider,$urlRouterProvider){$authProvider.configure({apiUrl:""}),$stateProvider.state("home",{url:"/",templateUrl:"app/home/home.html",controller:[function(){}]}).state("all",{"abstract":!0,resolve:{auth:["$auth",function($auth){return $auth.validateUser()}]}}),$urlRouterProvider.otherwise("/")}angular.module("everycent").config(RouteConfiguration),RouteConfiguration.$inject=["$authProvider","$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function BudgetsCtrl(MessageService,BudgetsService,StateService,$rootScope){function activate(){loadBudget()}function loadBudget(){return BudgetsService.getBudget(StateService.getParam("budget_id")).then(function(budget){vm.budget=budget,$rootScope.$broadcast("budget.loaded")})}function saveChanges(budget){BudgetsService.save(budget).then(function(){MessageService.setMessage("Budget saved."),loadBudget()},function(){MessageService.setErrorMessage("Budget not saved.")})}var vm=this;vm.state=StateService,vm.budget={},vm.saveChanges=saveChanges,activate()}angular.module("everycent.budgets").controller("BudgetEditorCtrl",BudgetsCtrl),BudgetsCtrl.$inject=["MessageService","BudgetsService","StateService","$rootScope"]}(),function(){"use strict";function BudgetsCtrl(MessageService,BudgetsService,ModalService,FormService,StateService){function activate(){refreshBudgetList()}function refreshBudgetList(){BudgetsService.getBudgets().then(function(budgets){vm.budgets=budgets})}function addBudget(budget,form){BudgetsService.addBudget(budget).then(function(){refreshBudgetList(),MessageService.setMessage('Budget "'+budget.name+'" added successfully.'),FormService.resetForm(budget,form,["start_date"])},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Budget not saved."),!1})}function selectBudgetForUpdate(budget){vm.state.goToState("budgets-edit",{budget_id:budget.id})}function copyBudget(budget){var modalOptions={headerText:"Copy this budget",bodyText:"Are you sure you want to copy the budget: "+budget.name+"?",confirmButtonText:"Copy",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){BudgetsService.copyBudget(budget).then(function(){refreshBudgetList(),MessageService.setMessage("Budget copied.")})},function(){MessageService.setErrorMessage("Copy cancelled.")})}function closeBudget(budget){var message="Are you sure you want to close the budget: "+budget.name+"?\n This action is not reversible. ",modalOptions={headerText:"Close this budget",bodyText:message,confirmButtonText:"Close",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){BudgetsService.closeBudget(budget).then(function(){refreshBudgetList(),MessageService.setMessage("Budget closed.")})},function(){MessageService.setErrorMessage("Close cancelled.")})}var vm=this;vm.state=StateService,vm.budgets=[],vm.addBudget=addBudget,vm.selectBudgetForUpdate=selectBudgetForUpdate,vm.copyBudget=copyBudget,vm.closeBudget=closeBudget,activate()}angular.module("everycent.budgets").controller("BudgetsCtrl",BudgetsCtrl),BudgetsCtrl.$inject=["MessageService","BudgetsService","ModalService","FormService","StateService"]}(),function(){"use strict";function BudgetsService($http,Restangular,filterFilter){function getBudgets(){return baseAll.getList()}function getBudget(budgetId){return Restangular.one("budgets",budgetId).get()}function addBudget(budget){return baseAll.post(budget)}function copyBudget(budget){return budget.customPUT(null,"copy")}function closeBudget(budget){return budget.customPUT(null,"close")}function addNewIncome(budget){var newIncome={id:"",name:"",amount:"",budget_id:budget.id,bank_account_id:""};budget.incomes.push(newIncome)}function addNewAllocation(budget){var newAllocation={id:"",name:"",amount:"",budget_id:budget.id,bank_account_id:""};return budget.allocations.push(newAllocation),newAllocation}function groupAllocationsByCategory(allocations,allocationCategories){return allocationCategories.forEach(function(category){category.allocations=filterFilter(allocations,function(allocation){return allocation.allocation_category_id===category.id})}),allocationCategories}function save(budget){return budget.save()}var service={getBudgets:getBudgets,getBudget:getBudget,addBudget:addBudget,copyBudget:copyBudget,closeBudget:closeBudget,addNewIncome:addNewIncome,addNewAllocation:addNewAllocation,groupAllocationsByCategory:groupAllocationsByCategory,save:save},baseAll=Restangular.all("budgets");return service}angular.module("everycent.budgets").factory("BudgetsService",BudgetsService),BudgetsService.$inject=["$http","Restangular","filterFilter"]}(),function(){function ecAllocationListEditor(){var directive={restrict:"E",templateUrl:"app/budgets/ec-allocation-list-editor-directive.html",scope:{budget:"="},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(UtilService,LookupService,StateService,BudgetsService,ReferenceService,$rootScope){function activate(){LookupService.refreshList("bank_accounts").then(function(bankAccounts){vm.bankAccounts=bankAccounts}),$rootScope.$on("budget.loaded",function(){LookupService.refreshList("allocation_categories").then(function(allocationCategories){vm.allocationCategories=allocationCategories,vm.groupedAllocationCategories=BudgetsService.groupAllocationsByCategory(vm.budget.allocations,vm.allocationCategories)})})}function addNewAllocation(){BudgetsService.addNewAllocation(vm.budget)}function addNewAllocationInCategory(category){var newAllocation=BudgetsService.addNewAllocation(vm.budget);newAllocation.allocation_category_id=category.id,category.allocations.push(newAllocation)}function markForDeletion(allocation,isDeleted){allocation.deleted=isDeleted}function switchToEditMode(){vm.originalAllocations=angular.copy(vm.budget.allocations),vm.isEditMode=!0}function switchToViewMode(){vm.isEditMode=!1}function cancelEdit(){vm.budget.allocations=vm.originalAllocations,vm.isEditMode=!1}function actualTotalForCategory(category){return vm.util.total(category.allocations,"amount")}function actualSpentForCategory(category){return vm.util.total(category.allocations,"spent")}function actualRemainingForCategory(category){return actualTotalForCategory(category)-actualSpentForCategory(category)}function recommendedTotalForCategory(category){var totalIncome=vm.util.total(vm.budget.incomes,"amount");return totalIncome*(category.percentage/100)}function unallocatedTotalForCategory(category){return recommendedTotalForCategory(category)-actualTotalForCategory(category)}function totalDiscretionaryAmount(){return vm.util.total(vm.budget.incomes,"amount")-vm.util.total(vm.budget.allocations,"amount")}var vm=this;vm.isEditMode=!1,vm.state=StateService,vm.ref=ReferenceService,vm.util=UtilService,vm.addNewAllocation=addNewAllocation,vm.addNewAllocationInCategory=addNewAllocationInCategory,vm.markForDeletion=markForDeletion,vm.switchToEditMode=switchToEditMode,vm.switchToViewMode=switchToViewMode,vm.cancelEdit=cancelEdit,vm.actualTotalForCategory=actualTotalForCategory,vm.actualSpentForCategory=actualSpentForCategory,vm.actualRemainingForCategory=actualRemainingForCategory,vm.recommendedTotalForCategory=recommendedTotalForCategory,vm.unallocatedTotalForCategory=unallocatedTotalForCategory,vm.totalDiscretionaryAmount=totalDiscretionaryAmount,activate()}angular.module("everycent.budgets").directive("ecAllocationListEditor",ecAllocationListEditor),controller.$inject=["UtilService","LookupService","StateService","BudgetsService","ReferenceService","$rootScope"]}(),function(){function ecAllocationListRow(){var directive={restrict:"AE",replace:!0,templateUrl:"app/budgets/ec-allocation-list-row-directive.html",scope:{allocation:"=",isEditMode:"="},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(LookupService,ReferenceService){function activate(){LookupService.refreshList("bank_accounts").then(function(bankAccounts){vm.bankAccounts=bankAccounts}),LookupService.refreshList("allocation_categories").then(function(allocationCategories){vm.allocationCategories=allocationCategories})}function markForDeletion(allocation,isDeleted){allocation.deleted=isDeleted}var vm=this;vm.ref=ReferenceService,vm.markForDeletion=markForDeletion,activate()}angular.module("everycent.budgets").directive("ecAllocationListRow",ecAllocationListRow),controller.$inject=["LookupService","ReferenceService"]}(),function(){function ecIncomeListEditor(){var directive={restrict:"E",templateUrl:"app/budgets/ec-income-list-editor-directive.html",scope:{budget:"="},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(UtilService,LookupService,StateService,BudgetsService,ReferenceService){function activate(){LookupService.refreshList("bank_accounts").then(function(bankAccounts){vm.bankAccounts=bankAccounts})}function addNewIncome(){BudgetsService.addNewIncome(vm.budget)}function markForDeletion(income,isDeleted){income.deleted=isDeleted}function switchToEditMode(){vm.originalIncomes=angular.copy(vm.budget.incomes),vm.isEditMode=!0}function switchToViewMode(){vm.isEditMode=!1}function cancelEdit(){vm.budget.incomes=vm.originalIncomes,vm.isEditMode=!1}var vm=this;vm.isEditMode=!1,vm.state=StateService,vm.ref=ReferenceService,vm.util=UtilService,vm.addNewIncome=addNewIncome,vm.markForDeletion=markForDeletion,vm.switchToEditMode=switchToEditMode,vm.switchToViewMode=switchToViewMode,vm.cancelEdit=cancelEdit,activate()}angular.module("everycent.budgets").directive("ecIncomeListEditor",ecIncomeListEditor),controller.$inject=["UtilService","LookupService","StateService","BudgetsService","ReferenceService"]}(),function(){"use strict";function DateService(){function convertFromBankDateFormat(dateInBankDateFormat){if(!dateInBankDateFormat||!dateInBankDateFormat.match)return"";var dateParts=dateInBankDateFormat.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);return 4!=dateParts.length?"":""+dateParts[3]+"/"+dateParts[1]+"/"+dateParts[2]}var service={convertFromBankDateFormat:convertFromBankDateFormat};return service}angular.module("everycent.common").factory("DateService",DateService)}(),function(){"use strict";function ecAmountFormatted(){function controller(){}var directive={restrict:"E",templateUrl:"app/common/ec-amount-formatted-directive.html",scope:{amount:"="},controller:controller,controllerAs:"vm",bindToController:!0};return directive}angular.module("everycent.common").directive("ecAmountFormatted",ecAmountFormatted),ecAmountFormatted.$inject=[]}(),function(){"use strict";function ecAmountLabel(){function controller(){function labelClasses(){var result={};return result["label-"+vm.type]=vm.amount>=0,result["label-danger"]=vm.amount<0,result}var vm=this;vm.labelClasses=labelClasses}var directive={restrict:"E",templateUrl:"app/common/ec-amount-label-directive.html",scope:{type:"@",label:"@",amount:"="},controller:controller,controllerAs:"vm",bindToController:!0};return directive}angular.module("everycent.common").directive("ecAmountLabel",ecAmountLabel),ecAmountLabel.$inject=[]}(),function(){"use strict";function ecAsDate(){function link(scope,element,attrs,ngModel){ngModel.$formatters.push(function(modelValue){return new Date(modelValue)}),ngModel.$parsers.push(function(modelValue){return new Date(modelValue)})}var directive={restrict:"A",require:"ngModel",link:link};return directive}angular.module("everycent.common").directive("ecAsDate",ecAsDate),ecAsDate.$inject=[]}(),function(){"use strict";function ecAsDollars(){function link(scope,element,attrs,ngModel){element.on("blur",function(){var value=element.val();element.val(Number(value).toFixed(2))}),ngModel.$formatters.push(function(modelValue){return(modelValue/100).toFixed(2)}),ngModel.$parsers.push(function(viewValue){var number=Number(viewValue);return 100*number})}var directive={restrict:"A",require:"ngModel",link:link};return directive}angular.module("everycent.common").directive("ecAsDollars",ecAsDollars),ecAsDollars.$inject=["ecToDollarsFilter"]}(),function(){"use strict";function ecBindingCount(){var directive={restrict:"E",template:'<button class="btn btn-info btn-xs" ng-click="vm.updateBindingCount()">{{ vm.total }} bindings.</button>',scope:{},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(){function getScopeList(rs){function traverseScope(s){scopeList.push(s),s.$$nextSibling&&traverseScope(s.$$nextSibling),s.$$childHead&&traverseScope(s.$$childHead)}var scopeList=[];return traverseScope(rs),scopeList}function updateBindingCount(){var scopes=getScopeList(angular.element(document.querySelectorAll("[ng-app]")).scope());vm.total=_.uniq(_.flatten(scopes.map(function(s){return s.$$watchers}))).length}var vm=this;vm.updateBindingCount=updateBindingCount}angular.module("everycent.common").directive("ecBindingCount",ecBindingCount),controller.$inject=[]}(),function(){"use strict";function ecFormField(){var directive={restrict:"E",templateUrl:"app/common/ec-form-field-directive.html",scope:{label:"@",type:"@",labelWidth:"@",fieldWidth:"@",placeholder:"@",listOf:"@",isRequired:"=ngRequired",model:"=ngModel",change:"&ngChange",error:"=",name:"=fieldName"},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(LookupService){var vm=this;vm.labelWidth=2,vm.fieldWidth=10,"select"===vm.type&&LookupService.refreshList(vm.listOf).then(function(items){vm.items=items})}angular.module("everycent.common").directive("ecFormField",ecFormField),controller.$inject=["LookupService"]}(),function(){"use strict";function ecIcon(){function controller(){}var directive={restrict:"E",templateUrl:"app/common/ec-icon-directive.html",scope:{type:"@"},controller:controller,controllerAs:"vm",bindToController:!0};return directive}angular.module("everycent.common").directive("ecIcon",ecIcon)}(),function(){function ecMessage(){var directive={restrict:"E",templateUrl:"app/common/ec-message-directive.html",scope:{},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(MessageService){var vm=this;vm.ui=MessageService.getMessageData(),vm.remove=MessageService.clearMessage}angular.module("everycent.common").directive("ecMessage",ecMessage),controller.$inject=["MessageService"]}(),function(){"use strict";function ecPanel(){function controller(){var vm=this;vm.type="default"}var directive={restrict:"E",templateUrl:"app/common/ec-panel-directive.html",transclude:!0,scope:{type:"@",title:"@"},controller:controller,controllerAs:"vm",bindToController:!0};return directive}angular.module("everycent.common").directive("ecPanel",ecPanel)}(),function(){"use strict";function ecToDollars(){return function(input){return(input/100).toFixed(2)}}angular.module("everycent.common").filter("ecToDollars",ecToDollars)}(),function(){"use strict";function ecValidateWithinBudget(){function link(scope,element,attrs,ngModel){scope.budget&&scope.transaction&&(ngModel.$validators.withinBudget=function(modelValue){return scope.transaction.deleted?!0:modelValue>=scope.budget.start_date&&modelValue<=scope.budget.end_date})}var directive={restrict:"A",require:"ngModel",link:link,scope:{budget:"=",transaction:"="}};return directive}angular.module("everycent.common").directive("ecValidateWithinBudget",ecValidateWithinBudget),ecValidateWithinBudget.$inject=[]}(),function(){"use strict";function FormService(){function setErrors(form,errorData){Object.keys(errorData).forEach(function(field){form[field].$error.server=errorData[field][0]})}function resetForm(model,form,fields){fields.forEach(function(field){model[field]="",form[field]&&(form[field].$error={})})}var service={setErrors:setErrors,resetForm:resetForm};return service}angular.module("everycent.common").factory("FormService",FormService),FormService.$inject=[]}(),function(){"use strict";function LookupService(Restangular,$q){function refreshList(list,params,ignoreCache){function _refreshFromServer(list,params){return promiseCache[list]=Restangular.all(list).getList(params).then(function(listValues){var simpleListValues=_mapRestangularObjectListToSimpleObjectList(listValues);return dataCache[list]=simpleListValues,simpleListValues}),promiseCache[list]}return ignoreCache?Restangular.all(list).getList(params).then(function(serverList){return _mapRestangularObjectListToSimpleObjectList(serverList)}):$q.when(dataCache[list]||promiseCache[list]||_refreshFromServer(list,params))}function clear(){dataCache={},promiseCache={}}function _mapRestangularObjectListToSimpleObjectList(restangularObjectList){var result=[];return restangularObjectList.forEach(function(obj){result.push(obj)}),result}var dataCache={},promiseCache={},service={clear:clear,refreshList:refreshList};return service}angular.module("everycent.common").factory("LookupService",LookupService),LookupService.$inject=["Restangular","$q"]}();var x=200;!function(){function MessageService(toastr){function getMessageData(){return data}function setMessage(message){clearMessage(),data.message=message,toastr.success(message)}function setErrorMessage(message){clearMessage(),data.errorMessage=message,toastr.error(message)}function setWarningMessage(message){clearMessage(),data.warningMessage=message,toastr.warning(message)}function clearMessage(){data.message="",data.errorMessage="",data.warningMessage=""}var data={},service={getMessageData:getMessageData,setMessage:setMessage,setErrorMessage:setErrorMessage,setWarningMessage:setWarningMessage,clearMessage:clearMessage};return service}angular.module("everycent.common").factory("MessageService",MessageService),MessageService.$inject=["toastr"]}(),function(){"use strict";function ModalService($modal,$document){function show(options){function modalController(){var vm=this;vm.options=options,modalFix(),vm.options.confirm=function(){modalInstance.close("ok")},vm.options.cancel=function(){modalInstance.dismiss("cancel")}}var modalInstance=$modal.open({templateUrl:"app/common/modal.html",backdrop:"static",controller:modalController,controllerAs:"vm"});return modalInstance.result}function modalFix(){setTimeout(function(){angular.element($document[0].querySelectorAll("div.modal-backdrop")).css("height","1000px")},100)}var service={show:show};return service}angular.module("everycent.common").factory("ModalService",ModalService),ModalService.$inject=["$modal","$document"]}(),function(){"use strict";function ReferenceService(){function updateReferenceId(model,referenceName){model[referenceName+"_id"]=model[referenceName].id}var service={updateReferenceId:updateReferenceId};return service}angular.module("everycent.common").factory("ReferenceService",ReferenceService),ReferenceService.$inject=[]}(),function(){"use strict";function StateService($state,$stateParams,MessageService){function goToState(state,params){return MessageService.clearMessage(),$state.go(state,params)}function go(state,params){return goToState(state,params)}function is(state){return $state.is(state)}function getParam(param){return $stateParams[param]}var service={goToState:goToState,go:go,is:is,getParam:getParam};return service}angular.module("everycent.common").factory("StateService",StateService),StateService.$inject=["$state","$stateParams","MessageService"]}(),function(){"use strict";function UserService(){function getUser(){return data.user}function setupUser(userDetails){data.user.name=userDetails.first_name+" "+userDetails.last_name,data.user.email=userDetails.email}function clear(){data.user.name="",data.user.email=""}var data={user:{}},service={getUser:getUser,setupUser:setupUser,clear:clear};return service}angular.module("everycent.common").factory("UserService",UserService),UserService.$inject=[]}(),function(){"use strict";function UtilService(){function total(items,fieldToSum){return _.reduce(items,function(sum,item){return item.deleted?sum:sum+item[fieldToSum]},0)}var service={total:total};return service}angular.module("everycent.common").factory("UtilService",UtilService),UtilService.$inject=[]}(),function(){function ecNavbar(){var directive={restrict:"E",templateUrl:"app/menu/ec-navbar-directive.html",controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(MessageService,UserService,StateService,$auth,LookupService){function signOut(){$auth.signOut()["finally"](function(){return UserService.clear(),StateService.go("sign_in")}).then(function(){MessageService.setMessage("Successfully signed out.")})}function isActive(menuOption){if("setup"===menuOption){var result=!1,setupMenuOptions=["institutions","bank-accounts","recurring-incomes","recurring-allocations","allocation-categories"];return setupMenuOptions.forEach(function(option){StateService.is(option)&&(result=!0)}),result}return"budgets"===menuOption?StateService.is("budgets")||StateService.is("budgets-edit")||StateService.is("budgets.new"):StateService.is(menuOption)}function go(state,params){StateService.go(state,params),vm.navMenuOpen=!1,vm.setupOpen=!1,LookupService.clear()}var vm=this;vm.user=UserService.getUser(),vm.signOut=signOut,vm.isActive=isActive,vm.go=go,vm.navMenuOpen=!1,vm.setupOpen=!1}angular.module("everycent.menu").directive("ecNavbar",ecNavbar),controller.$inject=["MessageService","UserService","StateService","$auth","LookupService"]}(),function(){"use strict";function SignInCtrl($auth,$state,UserService,MessageService){function signIn(params){$auth.submitLogin(params).then(function(response){UserService.setupUser(response),MessageService.setMessage("Logged in successfully."),$state.go("home")})["catch"](function(){return MessageService.setErrorMessage("Email or password is incorrect."),!0})}var vm=this;vm.signIn=signIn}angular.module("everycent.security").controller("SignInCtrl",SignInCtrl),SignInCtrl.$inject=["$auth","$state","UserService","MessageService"]}(),function(){"use strict";function AllocationCategoriesCtrl(UtilService,MessageService,AllocationCategoriesService,ModalService,FormService,StateService){function activate(){refreshAllocationCategoryList()}function refreshAllocationCategoryList(){return AllocationCategoriesService.getAllocationCategories().then(function(categories){vm.allocationCategories=categories})}function switchToEditMode(){vm.isEditMode=!0}function cancelEdit(){refreshAllocationCategoryList(),vm.isEditMode=!1}function newAllocationCategory(){var newCategory=AllocationCategoriesService.newCategory();vm.allocationCategories.push(newCategory)}function saveChanges(){vm.allocationCategories.forEach(function(category){category.deleted?category.remove():category.save()}),refreshAllocationCategoryList()["finally"](function(){MessageService.setMessage("Changes saved."),vm.isEditMode=!1})}function markForDeletion(category,isDeleted){category.deleted=isDeleted}function percentageTotal(){return UtilService.total(vm.allocationCategories,"percentage")}var vm=this;vm.state=StateService,vm.util=UtilService,vm.isEditMode=!1,vm.allocationCategories=[],vm.switchToEditMode=switchToEditMode,vm.cancelEdit=cancelEdit,vm.newAllocationCategory=newAllocationCategory,vm.saveChanges=saveChanges,vm.markForDeletion=markForDeletion,vm.percentageTotal=percentageTotal,activate()}angular.module("everycent.setup.allocation-categories").controller("AllocationCategoriesCtrl",AllocationCategoriesCtrl),AllocationCategoriesCtrl.$inject=["UtilService","MessageService","AllocationCategoriesService","ModalService","FormService","StateService"]}(),function(){"use strict";function AllocationCategoriesService($http,Restangular){function getAllocationCategories(){return baseAll.getList()}function newCategory(){var newCategoryObj={name:"",percentage:0};return Restangular.restangularizeElement("",newCategoryObj,"allocation_categories")}var service={getAllocationCategories:getAllocationCategories,newCategory:newCategory},baseAll=Restangular.all("allocation_categories");return service}angular.module("everycent.setup.allocation-categories").factory("AllocationCategoriesService",AllocationCategoriesService),AllocationCategoriesService.$inject=["$http","Restangular"]}(),function(){"use strict";function BankAccountsCtrl(MessageService,BankAccountsService,ModalService,FormService,StateService){function activate(){refreshBankAccountList()}function refreshBankAccountList(){BankAccountsService.getBankAccounts().then(function(bankAccounts){vm.bankAccounts=bankAccounts})}function addBankAccount(bankAccount,form){BankAccountsService.addBankAccount(bankAccount).then(function(){refreshBankAccountList(),MessageService.setMessage('Bank Account "'+bankAccount.name+'" added successfully.'),FormService.resetForm(bankAccount,form,["name","account_type","account_no","opening_balance"])
},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Bank Account not saved."),!1})}function selectBankAccountForUpdate(bankAccount){vm.bankAccount=bankAccount,StateService.goToState("bank-accounts.edit")}function updateBankAccount(bankAccount,form){bankAccount.save().then(function(){refreshBankAccountList(),MessageService.setMessage('Bank Account "'+bankAccount.name+'" updated successfully.'),FormService.resetForm(bankAccount,form,["name","account_type","institution_id","account_no","opening_balance"]),vm.bankAccount={},StateService.goToState("bank-accounts")},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Bank Account not updated."),!1})}function cancelEdit(){vm.bankAccount={},refreshBankAccountList(),StateService.goToState("bank-accounts")}function deleteBankAccount(bankAccount){var modalOptions={headerText:"Delete this Bank Account?",bodyText:"Are you sure you want to delete the Bank Account: "+bankAccount.name+"?",confirmButtonText:"Delete",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){bankAccount.remove().then(function(){refreshBankAccountList(),MessageService.setMessage("Bank Account deleted.")})["catch"](function(){MessageService.setErrorMessage("Error deleting.")})},function(){MessageService.setErrorMessage("Delete cancelled.")})}var vm=this;vm.state=StateService,vm.bankAccount={},vm.bankAccounts=[],vm.addBankAccount=addBankAccount,vm.selectBankAccountForUpdate=selectBankAccountForUpdate,vm.updateBankAccount=updateBankAccount,vm.cancelEdit=cancelEdit,vm.deleteBankAccount=deleteBankAccount,activate()}angular.module("everycent.setup.bank-accounts").controller("BankAccountsCtrl",BankAccountsCtrl),BankAccountsCtrl.$inject=["MessageService","BankAccountsService","ModalService","FormService","StateService"]}(),function(){"use strict";function BankAccountsService($http,Restangular){function getBankAccounts(){return baseAll.getList()}function addBankAccount(bankAccount){return baseAll.post(bankAccount)}var service={getBankAccounts:getBankAccounts,addBankAccount:addBankAccount},baseAll=Restangular.all("bank_accounts");return service}angular.module("everycent.setup.bank-accounts").factory("BankAccountsService",BankAccountsService),BankAccountsService.$inject=["$http","Restangular"]}(),function(){"use strict";function InstitutionsCtrl(MessageService,InstitutionsService,ModalService,FormService,StateService){function activate(){refreshInstitutionList()}function refreshInstitutionList(){InstitutionsService.getInstitutions().then(function(institutions){vm.institutions=institutions})}function addInstitution(institution,form){InstitutionsService.addInstitution(institution).then(function(){refreshInstitutionList(),MessageService.setMessage('Institution "'+institution.name+'" added successfully.'),FormService.resetForm(institution,form,["name"])},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Institution not saved."),!1})}function selectInstitutionForUpdate(institution){vm.institution=institution,StateService.goToState("institutions.edit")}function updateInstitution(institution,form){institution.save().then(function(){refreshInstitutionList(),MessageService.setMessage('Institution "'+institution.name+'" updated successfully.'),FormService.resetForm(institution,form,["name"]),vm.institution={},StateService.goToState("institutions")},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Institution not updated."),!1})}function cancelEdit(){vm.institution={},refreshInstitutionList(),StateService.goToState("institutions")}function deleteInstitution(institution){var modalOptions={headerText:"Delete this institution?",bodyText:"Are you sure you want to delete the institution: "+institution.name+"?",confirmButtonText:"Delete",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){institution.remove().then(function(){refreshInstitutionList(),MessageService.setMessage("Institution deleted.")})["catch"](function(){MessageService.setErrorMessage("Error deleting.")})},function(){MessageService.setErrorMessage("Delete cancelled.")})}var vm=this;vm.state=StateService,vm.institution={},vm.institutions=[],vm.addInstitution=addInstitution,vm.selectInstitutionForUpdate=selectInstitutionForUpdate,vm.updateInstitution=updateInstitution,vm.cancelEdit=cancelEdit,vm.deleteInstitution=deleteInstitution,activate()}angular.module("everycent.setup.institutions").controller("InstitutionsCtrl",InstitutionsCtrl),InstitutionsCtrl.$inject=["MessageService","InstitutionsService","ModalService","FormService","StateService"]}(),function(){"use strict";function InstitutionsService($http,Restangular){function getInstitutions(){return baseAll.getList()}function addInstitution(institution){return baseAll.post(institution)}var service={getInstitutions:getInstitutions,addInstitution:addInstitution},baseAll=Restangular.all("institutions");return service}angular.module("everycent.setup.institutions").factory("InstitutionsService",InstitutionsService),InstitutionsService.$inject=["$http","Restangular"]}(),function(){"use strict";function RecurringAllocationsCtrl(MessageService,RecurringAllocationsService,ModalService,FormService,StateService){function activate(){refreshRecurringAllocationList()}function refreshRecurringAllocationList(){RecurringAllocationsService.getRecurringAllocations().then(function(recurringAllocations){vm.recurringAllocations=recurringAllocations})}function addRecurringAllocation(recurringAllocation,form){RecurringAllocationsService.addRecurringAllocation(recurringAllocation).then(function(){refreshRecurringAllocationList(),MessageService.setMessage('Recurring Allocation "'+recurringAllocation.name+'" added successfully.'),FormService.resetForm(recurringAllocation,form,["name","amount","bank_account_id"])},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Recurring Allocation not saved."),!1})}function selectRecurringAllocationForUpdate(recurringAllocation){vm.recurringAllocation=recurringAllocation,StateService.goToState("recurring-allocations.edit")}function updateRecurringAllocation(recurringAllocation,form){recurringAllocation.save().then(function(){refreshRecurringAllocationList(),MessageService.setMessage('Recurring Allocation "'+recurringAllocation.name+'" updated successfully.'),FormService.resetForm(recurringAllocation,form,["name","account_type","institution_id","account_no","opening_balance"]),vm.recurringAllocation={},StateService.goToState("recurring-allocations")},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Recurring Allocation not updated."),!1})}function cancelEdit(){vm.recurringAllocation={},refreshRecurringAllocationList(),StateService.goToState("recurring-allocations")}function deleteRecurringAllocation(recurringAllocation){var modalOptions={headerText:"Delete this Recurring Allocation?",bodyText:"Are you sure you want to delete the Recurring Allocation: "+recurringAllocation.name+"?",confirmButtonText:"Delete",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){recurringAllocation.remove().then(function(){refreshRecurringAllocationList(),MessageService.setMessage("Recurring Allocation deleted.")})["catch"](function(){MessageService.setErrorMessage("Error deleting.")})},function(){MessageService.setErrorMessage("Delete cancelled.")})}var vm=this;vm.state=StateService,vm.recurringAllocation={},vm.recurringAllocations=[],vm.addRecurringAllocation=addRecurringAllocation,vm.selectRecurringAllocationForUpdate=selectRecurringAllocationForUpdate,vm.updateRecurringAllocation=updateRecurringAllocation,vm.cancelEdit=cancelEdit,vm.deleteRecurringAllocation=deleteRecurringAllocation,activate()}angular.module("everycent.setup.recurring-allocations").controller("RecurringAllocationsCtrl",RecurringAllocationsCtrl),RecurringAllocationsCtrl.$inject=["MessageService","RecurringAllocationsService","ModalService","FormService","StateService"]}(),function(){"use strict";function RecurringAllocationsService($http,Restangular){function getRecurringAllocations(){return baseAll.getList()}function addRecurringAllocation(recurringAllocation){return baseAll.post(recurringAllocation)}var service={getRecurringAllocations:getRecurringAllocations,addRecurringAllocation:addRecurringAllocation},baseAll=Restangular.all("recurring_allocations");return service}angular.module("everycent.setup.recurring-allocations").factory("RecurringAllocationsService",RecurringAllocationsService),RecurringAllocationsService.$inject=["$http","Restangular"]}(),function(){"use strict";function RecurringIncomesCtrl(MessageService,RecurringIncomesService,ModalService,FormService,StateService){function activate(){refreshRecurringIncomeList()}function refreshRecurringIncomeList(){RecurringIncomesService.getRecurringIncomes().then(function(recurringIncomes){vm.recurringIncomes=recurringIncomes})}function addRecurringIncome(recurringIncome,form){RecurringIncomesService.addRecurringIncome(recurringIncome).then(function(){refreshRecurringIncomeList(),MessageService.setMessage('Recurring Income "'+recurringIncome.name+'" added successfully.'),FormService.resetForm(recurringIncome,form,["name","amount","bank_account_id"])},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Recurring Income not saved."),!1})}function selectRecurringIncomeForUpdate(recurringIncome){vm.recurringIncome=recurringIncome,StateService.goToState("recurring-incomes.edit")}function updateRecurringIncome(recurringIncome,form){recurringIncome.save().then(function(){refreshRecurringIncomeList(),MessageService.setMessage('Recurring Income "'+recurringIncome.name+'" updated successfully.'),FormService.resetForm(recurringIncome,form,["name","account_type","institution_id","account_no","opening_balance"]),vm.recurringIncome={},StateService.goToState("recurring-incomes")},function(errorResponse){return FormService.setErrors(form,errorResponse.data),MessageService.setErrorMessage("Recurring Income not updated."),!1})}function cancelEdit(){vm.recurringIncome={},refreshRecurringIncomeList(),StateService.goToState("recurring-incomes")}function deleteRecurringIncome(recurringIncome){var modalOptions={headerText:"Delete this Recurring Income?",bodyText:"Are you sure you want to delete the Recurring Income: "+recurringIncome.name+"?",confirmButtonText:"Delete",cancelButtonText:"Cancel"};ModalService.show(modalOptions).then(function(){recurringIncome.remove().then(function(){refreshRecurringIncomeList(),MessageService.setMessage("Recurring Income deleted.")})["catch"](function(){MessageService.setErrorMessage("Error deleting.")})},function(){MessageService.setErrorMessage("Delete cancelled.")})}var vm=this;vm.state=StateService,vm.recurringIncome={},vm.recurringIncomes=[],vm.addRecurringIncome=addRecurringIncome,vm.selectRecurringIncomeForUpdate=selectRecurringIncomeForUpdate,vm.updateRecurringIncome=updateRecurringIncome,vm.cancelEdit=cancelEdit,vm.deleteRecurringIncome=deleteRecurringIncome,activate()}angular.module("everycent.setup.recurring-incomes").controller("RecurringIncomesCtrl",RecurringIncomesCtrl),RecurringIncomesCtrl.$inject=["MessageService","RecurringIncomesService","ModalService","FormService","StateService"]}(),function(){"use strict";function RecurringIncomesService($http,Restangular){function getRecurringIncomes(){return baseAll.getList()}function addRecurringIncome(recurringIncome){return baseAll.post(recurringIncome)}var service={getRecurringIncomes:getRecurringIncomes,addRecurringIncome:addRecurringIncome},baseAll=Restangular.all("recurring_incomes");return service}angular.module("everycent.setup.recurring-incomes").factory("RecurringIncomesService",RecurringIncomesService),RecurringIncomesService.$inject=["$http","Restangular"]}(),function(){"use strict";function AccountStatusesService($http,Restangular){function getAccountStatuses(){return baseAll.getList()}var service={getAccountStatuses:getAccountStatuses},baseAll=Restangular.all("account_statuses");return service}angular.module("everycent.transactions").factory("AccountStatusesService",AccountStatusesService),AccountStatusesService.$inject=["$http","Restangular"]}(),function(){function ecTransactionImporter(){var directive={restrict:"E",templateUrl:"app/transactions/ec-transaction-importer-directive.html",controller:controller,controllerAs:"vm",bindToController:!0,scope:{transactions:"=",startDate:"=",endDate:"="}};return directive}function controller(TransactionsService){function startImport(){vm.showForm=!0,vm.input="",vm.originalTransactions=angular.copy(vm.transactions)}function cancelImport(){vm.showForm=!1,vm.input=""}function convertToTransactions(input){var newTransactions=TransactionsService.convertToTransactions(input,vm.startDate,vm.endDate,vm.excludeBalances);vm.transactions=vm.transactions.concat(newTransactions),vm.showForm=!1}var vm=this;vm.showForm=!1,vm.startImport=startImport,vm.cancelImport=cancelImport,vm.convertToTransactions=convertToTransactions}angular.module("everycent.transactions").directive("ecTransactionImporter",ecTransactionImporter),controller.$inject=["TransactionsService"]}(),function(){function ecTransactionSearchForm(){var directive={restrict:"E",templateUrl:"app/transactions/ec-transaction-search-form-directive.html",scope:{search:"=searchOptions",onSubmit:"&"},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(LookupService,ReferenceService,$q){function activate(){var accountPromise=LookupService.refreshList("bank_accounts").then(function(items){vm.bank_accounts=items}),budgetPromise=LookupService.refreshList("budgets").then(function(items){vm.budgets=items});$q.all([accountPromise,budgetPromise]).then(function(){vm.search.bank_account=vm.bank_accounts[0],vm.search.bank_account_id=vm.bank_accounts[0].id,vm.search.budget=vm.budgets[0],vm.search.budget_id=vm.budgets[0].id,vm.onSubmit()})}var vm=this;vm.ref=ReferenceService,activate()}angular.module("everycent.transactions").directive("ecTransactionSearchForm",ecTransactionSearchForm),controller.$inject=["LookupService","ReferenceService","$q"]}(),function(){function ecTransactionSummary(){var directive={restrict:"E",templateUrl:"app/transactions/ec-transaction-summary-directive.html",scope:{bankAccount:"=",transactions:"="},controller:controller,controllerAs:"vm",bindToController:!0};return directive}function controller(){function lastBankBalance(){return vm.bankAccount?vm.bankAccount.current_balance:0}function transactionTotal(){if(!vm.transactions)return 0;var totalWithdrawals=0,totalDeposits=0;return vm.transactions.forEach(function(transaction){totalWithdrawals+=transaction.withdrawal_amount,totalDeposits+=transaction.deposit_amount}),totalDeposits-totalWithdrawals}function newBankBalance(){return lastBankBalance()+transactionTotal()}var vm=this;vm.lastBankBalance=lastBankBalance,vm.transactionTotal=transactionTotal,vm.newBankBalance=newBankBalance}angular.module("everycent.transactions").directive("ecTransactionSummary",ecTransactionSummary),controller.$inject=["UtilService"]}(),function(){"use strict";function TransactionsCtrl(MessageService,TransactionsService,LookupService,ReferenceService,UtilService){function activate(){refreshTransactions()}function refreshAllocations(){return LookupService.clear(),LookupService.refreshList("allocations",{budget_id:vm.search.budget_id},!0).then(function(allocations){vm.allocations=allocations})}function switchToEditMode(){vm.isEditMode=!0}function addTransaction(){var newTransaction=TransactionsService.newTransaction();vm.transactions.push(newTransaction)}function markForDeletion(transaction,isDeleted){var transactionDate=new Date(transaction.transaction_date),startDate=new Date(vm.search.budget.start_date),endDate=new Date(vm.search.budget.end_date);return!isDeleted&&(startDate>transactionDate||transactionDate>endDate)?void MessageService.setErrorMessage("Transaction date not in budget range."):void(transaction.deleted=isDeleted)}function markAllForDeletion(transactions,isDeleted){transactions.forEach(function(transaction){markForDeletion(transaction,isDeleted)}),transactions.deleted=isDeleted}function refreshTransactions(){refreshAllocations();var params={bank_account_id:vm.search.bank_account_id,budget_id:vm.search.budget_id};return TransactionsService.getTransactions(params).then(function(transactions){vm.transactions=transactions,vm.originalTransactions=transactions})}function saveChanges(){TransactionsService.save(vm.transactions,vm.search).then(function(){return refreshTransactions()}).then(function(){MessageService.setMessage("Transaction changes saved."),vm.isEditMode=!1})["catch"](function(){MessageService.setErrorMessage("Changes NOT saved.")})}function cancelEdit(){vm.transactions=vm.originalTransactions,vm.isEditMode=!1}function checkTransactionDate(transaction){var transactionDate=new Date(transaction.transaction_date),startDate=new Date(vm.search.budget.start_date),endDate=new Date(vm.search.budget.end_date);transaction.transaction_date_invalid=startDate>transactionDate&&transactionDate>endDate,transaction.deleted=transaction.transaction_date_invalid}var vm=this;vm.ref=ReferenceService,vm.util=UtilService,vm.search={},vm.refreshTransactions=refreshTransactions,vm.refreshAllocations=refreshAllocations,vm.switchToEditMode=switchToEditMode,vm.addTransaction=addTransaction,vm.saveChanges=saveChanges,vm.cancelEdit=cancelEdit,vm.markForDeletion=markForDeletion,vm.markAllForDeletion=markAllForDeletion,vm.checkTransactionDate=checkTransactionDate,activate()}angular.module("everycent.transactions").controller("TransactionsCtrl",TransactionsCtrl),TransactionsCtrl.$inject=["MessageService","TransactionsService","LookupService","ReferenceService","UtilService"]}(),function(){"use strict";function TransactionsService($http,Restangular,DateService){function newTransaction(){return{withdrawal_amount:0,deposit_amount:0}}function getTransactions(params){return baseAll.getList(params)}function save(transactions,searchOptions){var startDate=new Date(searchOptions.budget.start_date),endDate=new Date(searchOptions.budget.end_date),validTransactions=transactions.filter(function(transaction){var transactionDate=new Date(transaction.transaction_date);return!transaction.deleted&&transactionDate>=startDate&&endDate>=transactionDate}),params={budget_id:searchOptions.budget_id,bank_account_id:searchOptions.bank_account_id,transactions:validTransactions};return baseAll.post(params)}function convertToTransactions(input,startDate,endDate,noBalance){var transactionList=[],lines=_combineFieldsIntoLines(_convertInputToFieldList(input));return lines.shift(),lines.forEach(function(lineData){var transaction=_createTransactionFromLineData(lineData,startDate,endDate,noBalance);transactionList.push(transaction)}),transactionList}function _createTransactionFromLineData(lineData,startDate,endDate,noBalance){var lineDataCopy=angular.copy(lineData),transaction={};if(transaction.transaction_date=new Date(DateService.convertFromBankDateFormat(lineDataCopy.shift())),transaction.ref=lineDataCopy.shift(),noBalance||(transaction.balance=lineDataCopy.pop()),transaction.deposit_amount=100*_extractNumber(lineDataCopy.pop()),transaction.withdrawal_amount=100*_extractNumber(lineDataCopy.pop()),_isPayee(lineDataCopy[2])){var payeeDetailsArray=lineDataCopy[2].match(/^(\d{7}) (.*)/),payeeCode=payeeDetailsArray[1],payeeName=payeeDetailsArray[2];transaction.description=(lineDataCopy[0]+" "+payeeName).trim(),transaction.payeeName=payeeName,transaction.payeeCode=payeeCode}else transaction.description=lineDataCopy.join(" ").trim();var start=new Date(startDate),end=new Date(endDate);return(transaction.transaction_date<start||transaction.transaction_date>end)&&(transaction.deleted=!0),transaction}function _extractNumber(dollarString){var withoutCommas=dollarString.replace(/,/g,""),match=withoutCommas.match(/[$]([-0-9.,]*)/);return match&&match[1]?Number(match[1]):0}function _convertInputToFieldList(input){return input?input.split(/[\t\n]/):[]}function _combineFieldsIntoLines(items){var lines=[],currentLine=[];return items.forEach(function(item){_isDate(item)&&(lines.push(currentLine),currentLine=[]),currentLine.push(item)}),lines.push(currentLine),lines}function _isPayee(data){return/^\d{7} /.test(data)}function _isDate(data){return new RegExp("\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d").test(data)}var service={newTransaction:newTransaction,getTransactions:getTransactions,save:save,convertToTransactions:convertToTransactions},baseAll=Restangular.all("transactions");return service}angular.module("everycent.transactions").factory("TransactionsService",TransactionsService),TransactionsService.$inject=["$http","Restangular","DateService"]}();
//# sourceMappingURL=everycent-app-0.0.2.min.map